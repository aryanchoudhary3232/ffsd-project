<%- include('../partials/head', { title: 'Your Profile - SeekoBharat' }) %>
<body class="bg-black text-white">
  <%- include('../partials/navbar') %>

  <div class="container mx-auto px-4 py-8">
    <!-- Header with back link -->
    <div class="flex items-center mb-6">
      <h1 class="text-2xl font-bold">Your Profile</h1>
    </div>
    
    <!-- Alerts -->
    <% if(success_msg && success_msg.length > 0) { %>
      <div class="bg-green-800 border border-green-600 text-green-300 px-4 py-3 rounded mb-4">
        <%= success_msg %>
      </div>
    <% } %>
    <% if(error_msg && error_msg.length > 0) { %>
      <div class="bg-red-800 border border-red-600 text-red-300 px-4 py-3 rounded mb-4">
        <%= error_msg %>
      </div>
    <% } %>
    
    <!-- Form Container -->
    <div class="bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <div class="p-4 border-b border-gray-700">
        <h2 class="text-lg font-semibold text-gray-100">User Information</h2>
      </div>
      
      <div class="p-6">
        <!-- The form is now just a regular POST form without method override -->
        <form action="/user/profile" method="POST">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <!-- Full Name -->
            <div>
              <label for="name" class="block text-sm font-medium text-gray-300 mb-1">Full Name *</label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                value="<%= user.username %>" 
                required
                minlength="2"
                maxlength="50"
                pattern="[a-zA-Z\s'-]+"
                title="Name can only contain letters, spaces, apostrophes, and hyphens"
                class="w-full px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
              >
              <div id="nameError" class="text-red-400 text-sm mt-1 hidden"></div>
              <p class="text-gray-400 text-xs mt-1">Only letters, spaces, apostrophes, and hyphens allowed</p>
            </div>
            <!-- Email -->
            <div>
              <label for="email" class="block text-sm font-medium text-gray-300 mb-1">Email *</label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                value="<%= user.email %>" 
                required
                pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.com"
                title="Please enter a valid email address in format: xyz@abc.com"
                class="w-full px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
              >
              <div id="emailError" class="text-red-400 text-sm mt-1 hidden"></div>
              <p class="text-gray-400 text-xs mt-1">Must be in format: xyz@abc.com</p>
            </div>
          </div>
          
          <!-- Change Password Section -->
          <div class="border-t border-gray-700 pt-6">
            <h3 class="text-lg font-medium text-gray-100 mb-4">Change Password</h3>
            <p class="text-sm text-gray-400 mb-4">Leave blank to keep the current password.</p>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
              <div>
                <label for="currentPassword" class="block text-sm font-medium text-gray-300 mb-1">Current Password</label>
                <input 
                  type="password" 
                  id="currentPassword" 
                  name="currentPassword" 
                  class="w-full px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
                >
                <div id="currentPasswordError" class="text-red-400 text-sm mt-1 hidden"></div>
              </div>
              <div>
                <label for="newPassword" class="block text-sm font-medium text-gray-300 mb-1">New Password</label>
                <input 
                  type="password" 
                  id="newPassword" 
                  name="newPassword" 
                  minlength="6"
                  maxlength="128"
                  pattern="(?=.*[a-zA-Z])(?=.*\d).{6,}"
                  title="Password must be at least 6 characters and contain at least one letter and one number"
                  class="w-full px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
                >
                <div id="newPasswordError" class="text-red-400 text-sm mt-1 hidden"></div>
                <p class="text-gray-400 text-xs mt-1">At least 6 characters with one letter and one number</p>
              </div>
              <div>
                <label for="confirmPassword" class="block text-sm font-medium text-gray-300 mb-1">Confirm New Password</label>
                <input 
                  type="password" 
                  id="confirmPassword" 
                  name="confirmPassword" 
                  class="w-full px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
                >
                <div id="confirmPasswordError" class="text-red-400 text-sm mt-1 hidden"></div>
              </div>
            </div>
          </div>
          
          <!-- Form Actions -->
          <div class="flex justify-end">
            <button type="submit" 
                    class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors"
                    aria-label="Save your changes">
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const nameField = document.getElementById('name');
      const emailField = document.getElementById('email');
      const currentPasswordField = document.getElementById('currentPassword');
      const newPasswordField = document.getElementById('newPassword');
      const confirmPasswordField = document.getElementById('confirmPassword');
      const form = document.querySelector('form');
      
      // Validation functions
      function validateName(name) {
        if (!name || name.trim().length === 0) {
          return 'Name is required';
        }
        if (name.trim().length < 2) {
          return 'Name must be at least 2 characters long';
        }
        if (name.trim().length > 50) {
          return 'Name must be less than 50 characters';
        }
        const nameRegex = /^[a-zA-Z\s'-]+$/;
        if (!nameRegex.test(name.trim())) {
          return 'Name can only contain letters, spaces, apostrophes, and hyphens';
        }
        return null;
      }
      
      function validateEmail(email) {
        if (!email || email.trim().length === 0) {
          return 'Email is required';
        }
        // Check for format: xyz@abc.com
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.com$/;
        if (!emailRegex.test(email.trim())) {
          return 'Please enter a valid email address in format: xyz@abc.com';
        }
        return null;
      }
      
      function validatePassword(password) {
        if (!password) return null; // Optional field
        if (password.length < 6) {
          return 'Password must be at least 6 characters long';
        }
        if (password.length > 128) {
          return 'Password must be less than 128 characters';
        }
        if (!/(?=.*[a-zA-Z])(?=.*\d)/.test(password)) {
          return 'Password must contain at least one letter and one number';
        }
        return null;
      }
      
      function showError(fieldId, message) {
        const errorDiv = document.getElementById(fieldId + 'Error');
        const field = document.getElementById(fieldId);
        if (message) {
          errorDiv.textContent = message;
          errorDiv.classList.remove('hidden');
          field.classList.add('border-red-500');
        } else {
          errorDiv.classList.add('hidden');
          field.classList.remove('border-red-500');
        }
      }
      
      // Real-time validation
      nameField.addEventListener('input', function() {
        const error = validateName(this.value);
        showError('name', error);
      });
      
      emailField.addEventListener('input', function() {
        const error = validateEmail(this.value);
        showError('email', error);
      });
      
      newPasswordField.addEventListener('input', function() {
        const error = validatePassword(this.value);
        showError('newPassword', error);
        
        // Also check confirm password if it has a value
        if (confirmPasswordField.value) {
          const confirmError = this.value !== confirmPasswordField.value ? 'Passwords do not match' : null;
          showError('confirmPassword', confirmError);
        }
      });
      
      confirmPasswordField.addEventListener('input', function() {
        const error = newPasswordField.value !== this.value ? 'Passwords do not match' : null;
        showError('confirmPassword', error);
      });
      
      // Form submission validation
      form.addEventListener('submit', async function(e) {
        e.preventDefault(); // Always prevent default submission
        let hasErrors = false;
        
        // Validate name
        const nameError = validateName(nameField.value);
        if (nameError) {
          showError('name', nameError);
          hasErrors = true;
        }
        
        // Validate email
        const emailError = validateEmail(emailField.value);
        if (emailError) {
          showError('email', emailError);
          hasErrors = true;
        }
        
        // Validate passwords (only if new password is entered)
        if (newPasswordField.value || confirmPasswordField.value) {
          if (!currentPasswordField.value) {
            showError('currentPassword', 'Current password is required to change password');
            hasErrors = true;
          }
          
          const passwordError = validatePassword(newPasswordField.value);
          if (passwordError) {
            showError('newPassword', passwordError);
            hasErrors = true;
          }
          
          if (newPasswordField.value !== confirmPasswordField.value) {
            showError('confirmPassword', 'Passwords do not match');
            hasErrors = true;
          }
        }
        
        if (hasErrors) {
          // Scroll to first error
          const firstError = document.querySelector('.border-red-500');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            firstError.focus();
          }
          return;
        }

        // Submit form via fetch
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;

        try {
          submitButton.disabled = true;
          submitButton.textContent = 'Saving...';

          const formData = new FormData(form);
          const response = await fetch('/user/profile', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              name: formData.get('name'),
              email: formData.get('email'),
              currentPassword: formData.get('currentPassword'),
              newPassword: formData.get('newPassword'),
              confirmPassword: formData.get('confirmPassword')
            })
          });

          const data = await response.json();

          if (data.success) {
            showMessage(data.message, 'success');
            // Clear password fields
            currentPasswordField.value = '';
            newPasswordField.value = '';
            confirmPasswordField.value = '';
            // Update displayed name/email if needed
            if (data.user) {
              nameField.value = data.user.name;
              emailField.value = data.user.email;
            }
          } else {
            showMessage(data.message, 'error');
          }
        } catch (error) {
          console.error('Profile update error:', error);
          showMessage('An error occurred while updating your profile. Please try again.', 'error');
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      });

      function showMessage(message, type) {
        const existingMessage = document.querySelector('.profile-message');
        if (existingMessage) {
          existingMessage.remove();
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `profile-message px-4 py-3 rounded mb-4 ${
          type === 'success' 
            ? 'bg-green-800 border border-green-600 text-green-300' 
            : 'bg-red-800 border border-red-600 text-red-300'
        }`;
        messageDiv.textContent = message;

        const container = document.querySelector('.container');
        const heading = container.querySelector('h1');
        heading.insertAdjacentElement('afterend', messageDiv);

        // Auto-remove after 5 seconds
        setTimeout(() => {
          messageDiv.remove();
        }, 5000);
      }
    });
  </script>
</body>
</html>
