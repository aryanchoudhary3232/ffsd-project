<%- include('../partials/head', { title: 'Admin Dashboard - LearnHub' }) %>
<body class="bg-black text-white">
  <%- include('../partials/navbar') %>

  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6">Admin Dashboard</h1>
    
    <!-- Loading State -->
    <div id="loading" class="text-center py-16">
      <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto"></div>
      <p class="text-gray-400 mt-4">Loading dashboard data...</p>
    </div>
    
    <!-- Error State -->
    <div id="error" class="hidden bg-red-800 border border-red-600 text-red-300 px-4 py-3 rounded mb-4">
      <div class="flex items-center">
        <i class="fas fa-exclamation-triangle mr-2"></i>
        <span id="error-message">An error occurred while loading dashboard data.</span>
      </div>
      <button onclick="loadDashboardData()" class="ml-auto bg-red-600 text-red-200 px-3 py-1 rounded text-sm hover:bg-red-700">
        Retry
      </button>
    </div>
    
    <!-- Content Container -->
    <div id="content" class="hidden">
      <!-- Top Stats -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-gray-800 rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-2">Total Users</h2>
          <p id="total-users" class="text-3xl font-bold">0</p>
          <p id="users-growth" class="text-sm text-gray-400">+0% this month</p>
        </div>
        <div class="bg-gray-800 rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-2">Total Courses</h2>
          <p id="total-courses" class="text-3xl font-bold">0</p>
          <p id="courses-growth" class="text-sm text-gray-400">+0% this month</p>
        </div>
        <div class="bg-gray-800 rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-2">Total Instructors</h2>
          <p id="total-instructors" class="text-3xl font-bold">0</p>
          <p id="instructors-growth" class="text-sm text-gray-400">+0% this month</p>
        </div>
        <div class="bg-gray-800 rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-2">Total Revenue</h2>
          <p id="total-revenue" class="text-3xl font-bold">₹0.00</p>
          <p id="revenue-growth" class="text-sm text-gray-400">+₹0.00% this month</p>
        </div>
      </div>
      
      <!-- Recent Users & Courses -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <!-- Recent Users Table -->
        <div>
          <h2 class="text-xl font-bold mb-4">Recent Users</h2>
          <div class="bg-gray-800 rounded-lg shadow-md overflow-hidden">
            <table class="min-w-full divide-y divide-gray-700">
              <thead class="bg-gray-700">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Name</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Email</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Role</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Join Date</th>
                </tr>
              </thead>
              <tbody id="recent-users-table" class="bg-gray-800 divide-y divide-gray-700">
                <!-- Users will be loaded here dynamically -->
              </tbody>
            </table>
            <div class="px-6 py-3 bg-gray-700 text-right">
              <a href="/admin/users" class="text-blue-400 hover:underline text-sm">View All Users</a>
            </div>
          </div>
        </div>
        
        <!-- Recent Courses Table -->
        <div>
          <h2 class="text-xl font-bold mb-4">Recent Courses</h2>
          <div class="bg-gray-800 rounded-lg shadow-md overflow-hidden">
            <table class="min-w-full divide-y divide-gray-700">
              <thead class="bg-gray-700">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Course</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Instructor</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Category</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Price</th>
                </tr>
              </thead>
              <tbody id="recent-courses-table" class="bg-gray-800 divide-y divide-gray-700">
                <!-- Courses will be loaded here dynamically -->
              </tbody>
            </table>
            <div class="px-6 py-3 bg-gray-700 text-right">
              <a href="/admin/courses" class="text-blue-400 hover:underline text-sm">View All Courses</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Quick Actions & Platform Overview -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Quick Actions -->
        <div>
          <h2 class="text-xl font-bold mb-4">Quick Actions</h2>
          <div class="bg-gray-800 rounded-lg shadow-md p-6">
            <ul class="space-y-3">
              <li>
                <a href="/admin/users" class="flex items-center text-blue-400 hover:underline">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                  Manage Users
                </a>
              </li>
              <li>
                <a href="/admin/courses" class="flex items-center text-blue-400 hover:underline">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  Manage Courses
                </a>
              </li>
              <li>
                <a href="/admin/revenue" class="flex items-center text-blue-400 hover:underline">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  View Revenue
                </a>
              </li>
              <li>
                <a href="/admin/profile" class="flex items-center text-blue-400 hover:underline">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Admin Profile
                </a>
              </li>
            </ul>
          </div>
        </div>
        
        <!-- Platform Overview -->
        <div class="md:col-span-2">
          <h2 class="text-xl font-bold mb-4">Platform Overview</h2>
          <div class="bg-gray-800 rounded-lg shadow-md p-6">
            <div class="grid grid-cols-2 gap-4 mb-6">
              <!-- User Distribution -->
              <div>
                <h3 class="text-lg font-semibold mb-2">User Distribution</h3>
                <div id="user-distribution" class="space-y-2">
                  <!-- User distribution will be loaded here dynamically -->
                </div>
              </div>
              <!-- Course Categories -->
              <div>
                <h3 class="text-lg font-semibold mb-2">Course Categories</h3>
                <div id="course-categories" class="space-y-2">
                  <!-- Course categories will be loaded here dynamically -->
                </div>
              </div>
            </div>
            <!-- System Status -->
            <div>
              <h3 class="text-lg font-semibold mb-2">System Status</h3>
              <div id="system-status" class="grid grid-cols-3 gap-4">
                <!-- System status will be loaded here dynamically -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>
  
  <script>
    let dashboardData = null;
    
    // Load dashboard data from API
    async function loadDashboardData() {
      try {
        showLoading();
        hideError();
        
        const response = await fetch('/admin/api/dashboard', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
          },
          credentials: 'same-origin'
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`HTTP ${response.status}: ${errorText}`);
        }
        
        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.message || 'Failed to load dashboard data');
        }
        
        dashboardData = data.data;
        renderDashboard(dashboardData);
        hideLoading();
        showContent();
        
      } catch (error) {
        console.error('Error loading dashboard data:', error);
        hideLoading();
        showError(error.message);
      }
    }
    
    // Render dashboard components
    function renderDashboard(data) {
      const { stats, recentUsers, recentCourses, categoryStats, systemStatus } = data;
      
      // Update top statistics
      updateStats(stats);
      
      // Render recent users table
      renderRecentUsers(recentUsers);
      
      // Render recent courses table
      renderRecentCourses(recentCourses);
      
      // Render user distribution
      renderUserDistribution(stats.userDistribution);
      
      // Render course categories
      renderCourseCategories(categoryStats);
      
      // Render system status
      renderSystemStatus(systemStatus);
    }
    
    // Update top statistics cards
    function updateStats(stats) {
      document.getElementById('total-users').textContent = stats.totalUsers.toLocaleString();
      document.getElementById('total-courses').textContent = stats.totalCourses.toLocaleString();
      document.getElementById('total-instructors').textContent = stats.totalInstructors.toLocaleString();
      document.getElementById('total-revenue').textContent = `₹${parseFloat(stats.totalRevenue).toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
      
      // Calculate and display growth percentages (simulated)
      const usersGrowth = Math.max(1, Math.floor(stats.totalUsers * 0.1));
      const coursesGrowth = Math.max(1, Math.floor(stats.totalCourses * 0.05));
      const instructorsGrowth = Math.max(1, Math.floor(stats.totalInstructors * 0.1));
      const revenueGrowth = Math.max(100, stats.totalRevenue * 0.1);
      
      document.getElementById('users-growth').textContent = `+${usersGrowth} this month`;
      document.getElementById('courses-growth').textContent = `+${coursesGrowth} this month`;
      document.getElementById('instructors-growth').textContent = `+${instructorsGrowth} this month`;
      document.getElementById('revenue-growth').textContent = `+₹${revenueGrowth.toFixed(2)} this month`;
    }
    
    // Render recent users table
    function renderRecentUsers(users) {
      const tableBody = document.getElementById('recent-users-table');
      
      if (!users || users.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="px-6 py-8 text-center text-gray-400">
              No recent users found
            </td>
          </tr>
        `;
        return;
      }
      
      const usersHtml = users.map(user => {
        const userName = user.name || user.username || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Unknown User';
        const joinDate = user.joinDate ? new Date(user.joinDate).toLocaleDateString() : 'Unknown';
        
        let roleClass = 'bg-yellow-600 text-yellow-200';
        if (user.role === 'admin') {
          roleClass = 'bg-red-600 text-red-200';
        } else if (user.role === 'instructor') {
          roleClass = 'bg-blue-600 text-blue-200';
        }
        
        return `
          <tr>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-100">${userName}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-300">${user.email || 'No email'}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${roleClass}">
                ${user.role || 'student'}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
              ${joinDate}
            </td>
          </tr>
        `;
      }).join('');
      
      tableBody.innerHTML = usersHtml;
    }
    
    // Render recent courses table
    function renderRecentCourses(courses) {
      const tableBody = document.getElementById('recent-courses-table');
      
      if (!courses || courses.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="px-6 py-8 text-center text-gray-400">
              No recent courses found
            </td>
          </tr>
        `;
        return;
      }
      
      const coursesHtml = courses.map(course => `
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="flex-shrink-0 h-10 w-10">
                <img class="h-10 w-10 rounded-full object-cover" 
                     src="${course.thumbnail || '/img/placeholder.svg'}" 
                     alt="${course.title}"
                     onerror="if(this.src!=='http://localhost:5000/img/placeholder.svg') this.src='/img/placeholder.svg'; else this.style.display='none';">
              </div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-100">${course.title}</div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-100">${course.instructor || 'Unknown Instructor'}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-300">${course.category || 'Uncategorized'}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
            ₹${parseFloat(course.price || 0).toFixed(2)}
          </td>
        </tr>
      `).join('');
      
      tableBody.innerHTML = coursesHtml;
    }
    
    // Render user distribution chart
    function renderUserDistribution(distribution) {
      const container = document.getElementById('user-distribution');
      
      const types = [
        { key: 'students', label: 'Students', color: 'blue-600' },
        { key: 'instructors', label: 'Instructors', color: 'green-600' },
        { key: 'admins', label: 'Admins', color: 'red-600' }
      ];
      
      const distributionHtml = types.map(type => {
        const percentage = parseFloat(distribution[type.key]?.percentage || 0);
        return `
          <div>
            <div class="flex justify-between text-sm mb-1">
              <span>${type.label}</span>
              <span>${percentage.toFixed(1)}%</span>
            </div>
            <div class="w-full bg-gray-700 rounded-full h-2.5">
              <div class="bg-${type.color} h-2.5 rounded-full transition-all duration-500" style="width: ${percentage}%;"></div>
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = distributionHtml;
    }
    
    // Render course categories chart
    function renderCourseCategories(categoryStats) {
      const container = document.getElementById('course-categories');
      
      // Calculate total courses for percentage calculation
      const totalCourses = Object.values(categoryStats).reduce((sum, count) => sum + count, 0);
      
      if (totalCourses === 0) {
        container.innerHTML = '<p class="text-gray-400 text-sm">No courses available</p>';
        return;
      }
      
      // Get top 3 categories
      const sortedCategories = Object.entries(categoryStats)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3);
      
      const colors = ['purple-600', 'yellow-600', 'indigo-600'];
      
      const categoriesHtml = sortedCategories.map(([category, count], index) => {
        const percentage = ((count / totalCourses) * 100).toFixed(1);
        return `
          <div>
            <div class="flex justify-between text-sm mb-1">
              <span>${category}</span>
              <span>${percentage}%</span>
            </div>
            <div class="w-full bg-gray-700 rounded-full h-2.5">
              <div class="bg-${colors[index]} h-2.5 rounded-full transition-all duration-500" style="width: ${percentage}%;"></div>
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = categoriesHtml;
    }
    
    // Render system status
    function renderSystemStatus(systemStatus) {
      const container = document.getElementById('system-status');
      
      const services = [
        { key: 'database', label: 'Database' },
        { key: 'api', label: 'API' },
        { key: 'storage', label: 'Storage' }
      ];
      
      const statusHtml = services.map(service => {
        const status = systemStatus[service.key] || 'unknown';
        const isOperational = status === 'operational';
        const bgColor = isOperational ? 'bg-green-600' : 'bg-red-600';
        const dotColor = isOperational ? 'bg-green-500' : 'bg-red-500';
        const textColor = isOperational ? 'text-green-100' : 'text-red-100';
        const statusText = isOperational ? 'Operational' : 'Issues';
        
        return `
          <div class="${bgColor} p-3 rounded-md">
            <div class="flex items-center">
              <div class="h-3 w-3 ${dotColor} rounded-full mr-2"></div>
              <span class="${textColor} font-medium">${service.label}</span>
            </div>
            <p class="text-xs ${textColor} mt-1">${statusText}</p>
          </div>
        `;
      }).join('');
      
      container.innerHTML = statusHtml;
    }
    
    // UI state management
    function showLoading() {
      document.getElementById('loading').classList.remove('hidden');
    }
    
    function hideLoading() {
      document.getElementById('loading').classList.add('hidden');
    }
    
    function showContent() {
      document.getElementById('content').classList.remove('hidden');
    }
    
    function showError(message) {
      document.getElementById('error-message').textContent = message;
      document.getElementById('error').classList.remove('hidden');
    }
    
    function hideError() {
      document.getElementById('error').classList.add('hidden');
    }
    
    // Auto-refresh dashboard every 5 minutes
    function startAutoRefresh() {
      setInterval(() => {
        if (!document.hidden) {
          loadDashboardData();
        }
      }, 300000); // 5 minutes
    }
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      loadDashboardData();
      startAutoRefresh();
      
      // Refresh on focus
      window.addEventListener('focus', function() {
        loadDashboardData();
      });
    });
  </script>
</body>
</html>