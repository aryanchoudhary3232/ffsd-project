<%- include('../partials/head', { title: 'Course Management - LearnHub' }) %>
<body class="bg-black text-white">
  <%- include('../partials/navbar') %>

  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Course Management</h1>
      <a href="/admin/courses/new" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors">
        <i class="fas fa-plus-circle mr-2"></i> Add New Course
      </a>
    </div>
    
    <!-- Alerts -->
    <% if(success_msg && success_msg.length > 0) { %>
      <div class="bg-green-800 border border-green-600 text-green-300 px-4 py-3 rounded mb-4">
        <%= success_msg %>
      </div>
    <% } %>
    <% if(error_msg && error_msg.length > 0) { %>
      <div class="bg-red-800 border border-red-600 text-red-300 px-4 py-3 rounded mb-4">
        <%= error_msg %>
      </div>
    <% } %>
    
    <!-- Dynamic Alert Container -->
    <div id="alert-container" class="mb-4" style="display: none;"></div>
    
    <!-- Loading Spinner -->
    <div id="loading-spinner" class="flex justify-center items-center py-8">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      <span class="ml-3 text-gray-300">Loading courses...</span>
    </div>

    <!-- Courses List Container -->
    <div id="courses-container" class="bg-gray-800 rounded-lg shadow-md overflow-hidden mb-6" style="display: none;">
      <div class="p-4 border-b border-gray-700">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <h2 class="text-lg font-semibold">Courses (<span id="courses-count">0</span>)</h2>
          <div class="flex flex-col md:flex-row gap-2">
            <!-- Search Input -->
            <div class="relative">
              <input 
                type="text" 
                id="search-input" 
                placeholder="Search courses..." 
                value="<%= search %>"
                class="pl-10 pr-4 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
              >
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="fas fa-search text-gray-400"></i>
              </div>
            </div>
            <!-- Category Filter -->
            <select id="category-filter" class="px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white">
              <option value="all">All Categories</option>
            </select>
            <!-- Language Filter -->
            <select id="language-filter" class="px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white">
              <option value="all">All Languages</option>
            </select>
            <!-- Sort Filter -->
            <select id="sort-filter" class="px-3 py-2 bg-gray-700 border border-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="title-asc">Title (A-Z)</option>
              <option value="title-desc">Title (Z-A)</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
            </select>
          </div>
        </div>
        <div class="mt-2 text-xs text-gray-400">
          <span>Last updated: <span id="last-updated">--</span></span>
          <span class="ml-4">Request ID: <span id="request-id">--</span></span>
          <span class="ml-4">Active Filters: <span id="active-filters">None</span></span>
        </div>
      </div>
      
      <!-- Courses Table -->
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Course</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Instructor</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Category</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Price</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Students</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody id="courses-table-body" class="bg-gray-800 divide-y divide-gray-700">
            <!-- Courses will be populated dynamically -->
          </tbody>
        </table>
      </div>
      
      <div id="no-courses-message" class="p-8 text-center" style="display: none;">
        <p class="text-gray-400">No courses found matching your criteria.</p>
      </div>
      
      <!-- Pagination -->
      <div class="px-6 py-4 bg-gray-700 flex justify-between items-center">
        <div class="text-sm text-gray-300">
          Showing <span class="font-medium" id="showing-courses">0</span> courses
        </div>
        <div class="flex gap-2">
          <button class="bg-gray-600 border border-gray-700 text-gray-200 px-4 py-2 rounded-md hover:bg-gray-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            Previous
          </button>
          <button class="bg-gray-600 border border-gray-700 text-gray-200 px-4 py-2 rounded-md hover:bg-gray-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            Next
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Error Message -->
  <div id="error-container" class="bg-red-800 border border-red-600 text-red-300 px-4 py-3 rounded mb-4 container mx-auto px-4" style="display: none;">
    <p id="error-message">Failed to load courses. Please try again.</p>
    <button id="retry-button" class="mt-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm">
      Retry
    </button>
  </div>

  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM Elements
      const loadingSpinner = document.getElementById('loading-spinner');
      const coursesContainer = document.getElementById('courses-container');
      const errorContainer = document.getElementById('error-container');
      const errorMessage = document.getElementById('error-message');
      const retryButton = document.getElementById('retry-button');
      const coursesCount = document.getElementById('courses-count');
      const showingCourses = document.getElementById('showing-courses');
      const lastUpdated = document.getElementById('last-updated');
      const requestId = document.getElementById('request-id');
      const activeFilters = document.getElementById('active-filters');
      const coursesTableBody = document.getElementById('courses-table-body');
      const noCoursesMessage = document.getElementById('no-courses-message');
      
      // Filter elements
      const searchInput = document.getElementById('search-input');
      const categoryFilter = document.getElementById('category-filter');
      const languageFilter = document.getElementById('language-filter');
      const sortFilter = document.getElementById('sort-filter');

      let currentFilters = {
        search: new URLSearchParams(window.location.search).get('search') || '',
        category: new URLSearchParams(window.location.search).get('category') || 'all',
        language: new URLSearchParams(window.location.search).get('language') || 'all',
        sort: new URLSearchParams(window.location.search).get('sort') || 'newest'
      };

      // Set initial filter values from URL
      searchInput.value = currentFilters.search;
      categoryFilter.value = currentFilters.category;
      languageFilter.value = currentFilters.language;
      sortFilter.value = currentFilters.sort;

      // Fetch courses data from API
      async function fetchCourses() {
        try {
          // Show loading state
          loadingSpinner.style.display = 'flex';
          coursesContainer.style.display = 'none';
          errorContainer.style.display = 'none';

          // Build query parameters
          const params = new URLSearchParams();
          if (currentFilters.search) params.append('search', currentFilters.search);
          if (currentFilters.category !== 'all') params.append('category', currentFilters.category);
          if (currentFilters.language !== 'all') params.append('language', currentFilters.language);
          if (currentFilters.sort) params.append('sort', currentFilters.sort);

          // Make API request with detailed headers
          const response = await fetch(`/admin/api/courses?${params.toString()}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'application/json',
              'Cache-Control': 'no-cache',
              'X-Search-Query': currentFilters.search || 'none',
              'X-Category-Filter': currentFilters.category,
              'X-Language-Filter': currentFilters.language,
              'X-Sort-Order': currentFilters.sort
            },
            credentials: 'include'
          });

          // Log response details for debugging
          console.log('Response Status:', response.status);
          console.log('Response Headers:', [...response.headers.entries()]);

          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();
          console.log('API Response Data:', data);

          if (data.success) {
            displayCourses(data.data.courses, data.data, data.meta);
            populateFilters(data.data.categories, data.data.languages);
          } else {
            throw new Error(data.message || 'Failed to fetch courses');
          }

        } catch (error) {
          console.error('Fetch Courses Error:', error);
          showError(error.message);
        } finally {
          // Hide loading spinner
          loadingSpinner.style.display = 'none';
        }
      }

      // Display courses in the table
      function displayCourses(courses, data, meta) {
        // Update metadata
        coursesCount.textContent = data.totalCount;
        showingCourses.textContent = data.totalCount;
        lastUpdated.textContent = new Date(data.timestamp).toLocaleString();
        requestId.textContent = meta.requestId;
        
        // Update active filters display
        updateActiveFilters(data.filters);

        // Clear existing rows
        coursesTableBody.innerHTML = '';

        if (courses.length === 0) {
          noCoursesMessage.style.display = 'block';
        } else {
          noCoursesMessage.style.display = 'none';
          
          // Create table rows for each course
          courses.forEach(course => {
            const row = createCourseRow(course);
            coursesTableBody.appendChild(row);
          });
        }

        // Show courses container
        coursesContainer.style.display = 'block';
      }

      // Create a table row for a course
      function createCourseRow(course) {
        const tr = document.createElement('tr');
        tr.classList.add('hover:bg-gray-700', 'transition-colors');
        
        // Format price and status
        const price = course.price ? parseFloat(course.price).toFixed(2) : '0.00';
        const status = course.status || 'draft';
        const statusClass = status === 'published' ? 'bg-green-600 text-green-200' : 'bg-yellow-600 text-yellow-200';
        const statusText = status.charAt(0).toUpperCase() + status.slice(1);
        
        // Format update date
        const updatedDate = course.updatedAt ? new Date(course.updatedAt).toLocaleDateString() : 'N/A';
        
        tr.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="flex-shrink-0 h-10 w-10">
                <img class="h-10 w-10 rounded-md object-cover bg-gray-600" src="${escapeHtml(course.thumbnail || '/img/placeholder.svg')}" alt="${escapeHtml(course.title)}" onerror="handleImageError(this)">
              </div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-100">${escapeHtml(course.title)}</div>
                <div class="text-xs text-gray-400">Updated: ${updatedDate}</div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-100">${escapeHtml(course.instructor)}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-100">${escapeHtml(course.category)}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-100">₹${price}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-100">${course.students || 0}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
              ${statusText}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <a href="/admin/courses/${course._id}" class="text-indigo-400 hover:text-indigo-200 mr-3 transition-colors">View</a>
            <a href="/admin/courses/${course._id}/edit" class="text-blue-400 hover:text-blue-200 mr-3 transition-colors">Edit</a>
            <button 
              type="button" 
              class="text-red-400 hover:text-red-200 transition-colors" 
              onclick="deleteCourse('${course._id}', '${course.title}')"
            >
              Delete
            </button>
          </td>
        `;

        return tr;
      }

      // Populate filter dropdowns
      function populateFilters(categories, languages) {
        // Populate categories
        categoryFilter.innerHTML = '<option value="all">All Categories</option>';
        categories.forEach(category => {
          const option = document.createElement('option');
          option.value = category;
          option.textContent = category;
          option.selected = category === currentFilters.category;
          categoryFilter.appendChild(option);
        });

        // Populate languages
        languageFilter.innerHTML = '<option value="all">All Languages</option>';
        languages.forEach(language => {
          const option = document.createElement('option');
          option.value = language;
          option.textContent = language;
          option.selected = language === currentFilters.language;
          languageFilter.appendChild(option);
        });
      }

      // Update active filters display
      function updateActiveFilters(filters) {
        const activeFiltersList = [];
        
        if (filters.search) activeFiltersList.push(`Search: "${filters.search}"`);
        if (filters.category !== 'all') activeFiltersList.push(`Category: ${filters.category}`);
        if (filters.language !== 'all') activeFiltersList.push(`Language: ${filters.language}`);
        if (filters.sort !== 'newest') activeFiltersList.push(`Sort: ${filters.sort}`);
        
        activeFilters.textContent = activeFiltersList.length > 0 ? activeFiltersList.join(', ') : 'None';
      }

      // Escape HTML to prevent XSS
      function escapeHtml(text) {
        if (typeof text !== 'string') return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }

      // Show error message
      function showError(message) {
        errorMessage.textContent = message;
        errorContainer.style.display = 'block';
        coursesContainer.style.display = 'none';
      }

      // Apply filters and fetch new data
      function applyFilters() {
        currentFilters.search = searchInput.value.trim();
        currentFilters.category = categoryFilter.value;
        currentFilters.language = languageFilter.value;
        currentFilters.sort = sortFilter.value;
        
        // Update URL without reloading page
        const params = new URLSearchParams();
        if (currentFilters.search) params.append('search', currentFilters.search);
        if (currentFilters.category !== 'all') params.append('category', currentFilters.category);
        if (currentFilters.language !== 'all') params.append('language', currentFilters.language);
        if (currentFilters.sort !== 'newest') params.append('sort', currentFilters.sort);
        
        const newUrl = `/admin/courses${params.toString() ? '?' + params.toString() : ''}`;
        window.history.pushState({}, '', newUrl);
        
        fetchCourses();
      }

      // Event listeners for filters
      let searchTimeout;
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(applyFilters, 500); // Debounce search
      });

      categoryFilter.addEventListener('change', applyFilters);
      languageFilter.addEventListener('change', applyFilters);
      sortFilter.addEventListener('change', applyFilters);

      // Retry button functionality
      retryButton.addEventListener('click', fetchCourses);

      // Auto-refresh every 60 seconds (optional)
      let autoRefreshInterval = setInterval(fetchCourses, 60000);

      // Stop auto-refresh when page is not visible
      document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
          clearInterval(autoRefreshInterval);
        } else {
          autoRefreshInterval = setInterval(fetchCourses, 60000);
        }
      });

      // Delete course function
      window.deleteCourse = async function(courseId, courseTitle) {
        if (!courseId) {
          showAlert('Invalid course ID', 'error');
          return;
        }

        // Confirm deletion
        if (!confirm(`Are you sure you want to delete "${courseTitle}"?\n\nThis action cannot be undone.`)) {
          return;
        }

        try {
          showLoading();
          console.log(`Attempting to delete course: ${courseId}`);

          const response = await fetch(`/admin/courses/${courseId}/delete`, {
            method: 'DELETE',
            credentials: 'include',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            }
          });

          console.log('Delete response status:', response.status);
          console.log('Delete response headers:', {
            contentType: response.headers.get('Content-Type'),
            location: response.headers.get('Location')
          });

          if (!response.ok) {
            let errorMessage = 'Failed to delete course';
            try {
              const errorData = await response.json();
              errorMessage = errorData.message || errorMessage;
            } catch (e) {
              errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            }
            throw new Error(errorMessage);
          }

          const result = await response.json();
          console.log('Course deleted successfully:', result);
          
          showAlert(result.message || 'Course deleted successfully', 'success');
          
          // Refresh the course list
          await fetchCourses();

        } catch (error) {
          console.error('Error deleting course:', error);
          showAlert(error.message || 'Failed to delete course. Please try again.', 'error');
        } finally {
          hideLoading();
        }
      };

      // Initial load
      fetchCourses();
    });

    // Helper functions
    function showLoading() {
      const loadingSpinner = document.getElementById('loading-spinner');
      loadingSpinner.style.display = 'flex';
    }

    function hideLoading() {
      const loadingSpinner = document.getElementById('loading-spinner');
      loadingSpinner.style.display = 'none';
    }

    function showAlert(message, type = 'info') {
      const alertContainer = document.getElementById('alert-container');
      const alertClass = type === 'error' ? 'bg-red-800 border-red-600 text-red-300' : 
                        type === 'success' ? 'bg-green-800 border-green-600 text-green-300' : 
                        'bg-blue-800 border-blue-600 text-blue-300';
      
      alertContainer.innerHTML = `
        <div class="${alertClass} border px-4 py-3 rounded">
          ${message}
        </div>
      `;
      alertContainer.style.display = 'block';
      
      // Auto-hide success alerts after 3 seconds
      if (type === 'success') {
        setTimeout(() => {
          alertContainer.style.display = 'none';
        }, 3000);
      }
    }

    // Image error handling
    function handleImageError(img) {
      if (img.src !== 'http://localhost:5000/img/placeholder.svg') {
        img.src = '/img/placeholder.svg';
      } else {
        // If placeholder also fails, use a CSS-only fallback
        img.style.display = 'none';
        img.nextElementSibling && img.nextElementSibling.classList.remove('hidden');
        
        // If no sibling, create a fallback element
        if (!img.nextElementSibling || !img.nextElementSibling.classList.contains('img-fallback')) {
          const fallback = document.createElement('div');
          fallback.className = 'img-fallback h-10 w-10 rounded-md bg-gray-600 flex items-center justify-center text-gray-400 text-xs';
          fallback.innerHTML = '<i class="fas fa-image"></i>';
          img.parentNode.insertBefore(fallback, img.nextSibling);
        }
      }
    }

    // Network debugging
    console.log('Courses page loaded - check Network tab for API calls');
    console.log('Available endpoints: /admin/api/courses, /admin/courses/:id/delete');
  </script>
</body>
</html>