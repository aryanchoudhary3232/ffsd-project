<%- include('../partials/head', { title: 'Learning: ' + course.title + ' - SeekoBharat' }) %>
<body class="bg-gray-900 text-white">
  <div class="flex flex-col h-screen">
    <!-- Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-3 flex justify-between items-center">
        <div class="flex items-center">
          <a href="/dashboard" class="text-white hover:text-gray-300 mr-4">
            <i class="fas fa-arrow-left"></i>
          </a>
          <h1 class="text-xl font-bold truncate max-w-md"><%= course.title %></h1>
        </div>
        <div class="flex items-center gap-4">
          <div class="hidden md:block">
            <div class="flex items-center">
              <div class="w-48 bg-gray-600 rounded-full h-2.5 mr-2">
                <div class="bg-purple-500 h-2.5 rounded-full" style="width: <%= progress %>%"></div>
              </div>
              <span class="text-sm font-medium"><%= progress %>%</span>
            </div>
          </div>
          <button id="sidebar-toggle" class="md:hidden text-gray-300 hover:text-gray-100">
            <i class="fas fa-bars"></i>
          </button>
        </div>
      </div>
    </header>

    <div class="flex flex-1 overflow-hidden relative">
      <!-- Sidebar -->
      <div id="sidebar" class="md:relative md:w-80 bg-gray-800 border-r border-gray-700 overflow-y-auto h-full md:h-auto fixed z-50 w-3/4 left-0 top-0 -translate-x-full md:translate-x-0 transition-transform duration-300">
        <div class="p-4 border-b border-gray-700">
          <h2 class="font-bold text-lg">Course Content</h2>
          <div class="flex items-center text-sm text-gray-400 mt-1">
            <span><%= course.modules && course.modules.length ? course.modules.length : 0 %> modules • </span>
            <span><%= course.modules ? course.modules.reduce((total, m) => total + (m.lessons ? m.lessons.length : 0), 0) : 0 %> lessons • </span>
            <span><%= completedLessons ? completedLessons.length : 0 %> completed</span>
          </div>
        </div>

        <div class="divide-y divide-gray-700">
          <% if (course.modules && course.modules.length > 0) { %>
            <% course.modules.forEach(function(module, moduleIndex) { %>
            <div class="p-4">
              <div class="flex justify-between items-center mb-2">
                <h3 class="font-semibold"><%= module.title %></h3>
                <% 
                  const totalLessons = module.lessons ? module.lessons.length : 0;
                  const completedModuleLessons = module.lessons ? module.lessons.filter(lesson => 
                    completedLessons.includes(lesson._id || lesson.id)
                  ).length : 0;
                  const isModuleCompleted = totalLessons === completedModuleLessons && totalLessons > 0;
                %>
                <% if (isModuleCompleted) { %>
                <span class="text-green-400 text-sm">
                  <i class="fas fa-check-circle"></i> Completed
                </span>
                <% } else if (completedModuleLessons > 0) { %>
                <span class="text-purple-400 text-sm">
                  <%= completedModuleLessons %>/<%= totalLessons %>
                </span>
                <% } %>
              </div>
              <div class="space-y-2 pl-2">
                <% if (module.lessons && module.lessons.length > 0) { %>
                  <% module.lessons.forEach(function(lesson) { %>
                  <a 
                    href="/courses/<%= course._id %>/learn?lesson=<%= lesson._id || lesson.id %>" 
                    class="flex items-center p-2 rounded-md <%= (currentLesson._id || currentLesson.id) === (lesson._id || lesson.id) ? 'bg-purple-700 text-purple-200' : 'hover:bg-gray-700' %>"
                  >
                    <% if (completedLessons.includes(lesson._id || lesson.id)) { %>
                    <i class="fas fa-check-circle text-green-400 mr-2"></i>
                    <% } else if (lesson.type === 'video') { %>
                    <i class="fas fa-play-circle text-gray-400 mr-2"></i>
                    <% } else if (lesson.type === 'pdf') { %>
                    <i class="fas fa-file-pdf text-red-400 mr-2"></i>
                    <% } else if (lesson.type === 'quiz') { %>
                    <i class="fas fa-question-circle text-purple-400 mr-2"></i>
                    <% } else { %>
                    <i class="fas fa-file-alt text-gray-400 mr-2"></i>
                    <% } %>
                    <span class="<%= currentLesson._id === lesson._id ? 'font-medium' : '' %>">
                      <%= lesson.title %>
                    </span>
                    <% if (lesson.duration) { %>
                    <span class="ml-auto text-xs text-gray-400"><%= lesson.duration %></span>
                    <% } %>
                  </a>
                  <% }); %>
                <% } else { %>
                  <p class="text-gray-400 text-sm">No lessons in this module</p>
                <% } %>
              </div>
            </div>
            <% }); %>
          <% } else { %>
            <div class="p-4 text-center text-gray-400">
              <p>No course content available yet.</p>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Main Content -->
      <div class="flex-1 overflow-y-auto">
        <div class="container mx-auto px-4 py-6 max-w-4xl">
          <div class="bg-gray-800 rounded-lg shadow-md overflow-hidden mb-6">
            <% if (currentLesson.type === 'video') { %>
            <div class="aspect-video bg-black flex items-center justify-center">
              <% if (currentLesson.file) { %>
              <video 
                controls 
                id="lesson-video" 
                class="w-full h-full" 
                poster="/img/video-poster.jpg"
              >
                <source src="<%= currentLesson.file %>" type="video/mp4">
                Your browser does not support the video tag.
              </video>
              <% } else { %>
              <div class="text-white text-center p-8">
                <i class="fas fa-film text-5xl mb-4"></i>
                <p class="text-xl">Video placeholder</p>
              </div>
              <% } %>
            </div>
            <% } else if (currentLesson.type === 'pdf') { %>
            <div class="aspect-video bg-gray-700 flex items-center justify-center p-8">
              <div class="text-center">
                <i class="fas fa-file-pdf text-red-400 text-5xl mb-4"></i>
                <h3 class="text-xl font-semibold mb-2"><%= currentLesson.title %></h3>
                <p class="text-gray-300 mb-4">PDF document</p>
                <a 
                  href="<%= currentLesson.file || '#' %>" 
                  class="inline-flex items-center bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition-colors"
                  <%= currentLesson.file ? 'download' : '' %>
                >
                  <i class="fas fa-download mr-2"></i> Download
                </a>
              </div>
            </div>
            <% } else if (currentLesson.type === 'quiz') { %>
            <div class="aspect-video bg-gray-700 flex items-center justify-center p-8">
              <div class="text-center">
                <i class="fas fa-question-circle text-purple-400 text-5xl mb-4"></i>
                <h3 class="text-xl font-semibold mb-2"><%= currentLesson.title %></h3>
                <p class="text-gray-300 mb-4">Quiz</p>
                <button 
                  class="inline-flex items-center bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition-colors"
                  onclick="startQuiz()"
                >
                  <i class="fas fa-play mr-2"></i> Start Quiz
                </button>
              </div>
            </div>
            <% } else { %>
            <div class="aspect-video bg-gray-700 flex items-center justify-center p-8">
              <div class="text-center">
                <i class="fas fa-file-alt text-gray-400 text-5xl mb-4"></i>
                <h3 class="text-xl font-semibold mb-2"><%= currentLesson.title %></h3>
                <p class="text-gray-300 mb-4">Assignment</p>
                <a 
                  href="<%= currentLesson.file || '#' %>" 
                  class="inline-flex items-center bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition-colors"
                  <%= currentLesson.file ? 'download' : '' %>
                >
                  <i class="fas fa-download mr-2"></i> Download
                </a>
              </div>
            </div>
            <% } %>

            <div class="p-6">
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold"><%= currentLesson.title %></h2>
                <% if (completedLessons.includes(currentLesson._id || currentLesson.id)) { %>
                <span class="inline-flex items-center text-green-400">
                  <i class="fas fa-check-circle mr-1"></i> Completed
                </span>
                <% } %>
              </div>
              
              <div class="prose max-w-none prose-invert">
                <p>This lesson covers important concepts and techniques.</p>
                <% if (currentLesson.type === 'video') { %>
                <h3>Video Transcript</h3>
                <p>Transcript here.</p>
                <% } %>
                <h3>Key Takeaways</h3>
                <ul>
                  <li>Core concepts</li>
                  <li>Practical techniques</li>
                  <li>Building on previous knowledge</li>
                </ul>
              </div>
            </div>
          </div>
          
          <div class="flex flex-wrap justify-between items-center mb-8 gap-2">
            <% 
              let prevLesson = null;
              let nextLesson = null;
              const allLessons = [];
              
              // Safely collect all lessons
              if (course.modules && course.modules.length > 0) {
                course.modules.forEach(module => {
                  if (module.lessons && module.lessons.length > 0) {
                    module.lessons.forEach(lesson => {
                      allLessons.push(lesson);
                    });
                  }
                });
              }
              
              const currentLessonId = currentLesson._id || currentLesson.id;
              const currentIndex = allLessons.findIndex(l => (l._id || l.id) === currentLessonId);
              if (currentIndex > 0) {
                prevLesson = allLessons[currentIndex - 1];
              }
              if (currentIndex < allLessons.length - 1) {
                nextLesson = allLessons[currentIndex + 1];
              }
            %>
            <% if (prevLesson) { %>
            <a 
              href="/courses/<%= course._id %>/learn?lesson=<%= prevLesson._id || prevLesson.id %>" 
              class="inline-flex items-center bg-gray-700 border border-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition-colors"
            >
              <i class="fas fa-arrow-left mr-2"></i> Previous Lesson
            </a>
            <% } else { %>
            <div></div>
            <% } %>
            <div class="flex flex-wrap gap-2">
              <% if (!completedLessons.includes(currentLesson._id || currentLesson.id)) { %>
              <button 
                id="complete-lesson-btn"
                class="inline-flex items-center bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition-colors"
                onclick="markAsComplete()"
              >
                <i class="fas fa-check mr-2"></i> Mark as Complete
              </button>
              <% } %>
              <% if (nextLesson) { %>
              <a 
                href="/courses/<%= course._id %>/learn?lesson=<%= nextLesson._id || nextLesson.id %>" 
                class="inline-flex items-center bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition-colors"
              >
                Next Lesson <i class="fas fa-arrow-right ml-2"></i>
              </a>
              <% } %>
            </div>
          </div>
          
          <div class="bg-gray-800 rounded-lg shadow-md p-6 mb-8">
            <h3 class="text-xl font-bold mb-4">Discussion</h3>
            <div id="comments-container" class="space-y-4 mb-6 discussion-container">
              <!-- Comments will be loaded dynamically -->
              <div class="text-center p-4 loading-spinner">
                <i class="fas fa-spinner fa-spin text-purple-500 text-2xl"></i>
              </div>
            </div>
            <div class="flex gap-4">
              <div class="flex-shrink-0">
                <div class="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center">
                  <i class="fas fa-user text-gray-300"></i>
                </div>
              </div>
              <div class="flex-1">
                <textarea 
                  id="comment-text"
                  class="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-black" 
                  rows="3" 
                  placeholder="Add to the discussion..."
                ></textarea>
                <div class="flex justify-end mt-2">
                  <button id="post-comment-btn" class="bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition-colors">
                    Post Comment
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Mobile Sidebar Overlay -->
      <div id="sidebar-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"></div>
    </div>
  </div>


  <%- include('../partials/scripts') %>
  
  <script>
    // Prevent cart operations from running on the learning page
    window.isLearningPage = true;
    
    // Determine the correct lesson ID (prefer _id, fallback to id)
    const lessonIdentifier = '<%= typeof currentLesson._id !== "undefined" ? currentLesson._id : currentLesson.id %>';
    // Clean the identifier if it's an ObjectId string representation like {"$oid":"..."} 
    let lessonId = String(lessonIdentifier);
    if (lessonId.includes('"$oid"')) {
      const match = lessonId.match(/\{\\"\\$oid\\":\\"(.+)\\"\}/);
      if (match) {
        lessonId = match[1];
      }
    }
    console.log('Lesson ID:', lessonId);

    // Determine the correct course ID (should always be _id)
    const courseIdentifier = '<%= course._id %>';
    // Clean the identifier if it's an ObjectId string representation
    let courseId = String(courseIdentifier);
    if (courseId.includes('"$oid"')) {
      const match = courseId.match(/\{\\"\\$oid\\":\\"(.+)\\"\}/);
      if (match) {
        courseId = match[1];
      }
    }
    console.log('Course ID:', courseId);

    document.addEventListener('DOMContentLoaded', function() {
      // Sidebar toggle functionality
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebar = document.getElementById('sidebar');
      const overlay = document.getElementById('sidebar-overlay');
      
      if (sidebarToggle && sidebar && overlay) {
        sidebarToggle.addEventListener('click', function() {
          // Toggle sidebar visibility with transform
          if (sidebar.classList.contains('-translate-x-full')) {
            sidebar.classList.remove('-translate-x-full');
            overlay.classList.remove('hidden');
            document.body.classList.add('overflow-hidden');
          } else {
            sidebar.classList.add('-translate-x-full');
            overlay.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
          }
        });

        overlay.addEventListener('click', function() {
          sidebarToggle.click();
        });
      }

      // Load comments when the page loads
      loadComments();
      
      // Attach event listener to the Post Comment button
      const postCommentBtn = document.getElementById('post-comment-btn');
      if (postCommentBtn) {
        postCommentBtn.addEventListener('click', postComment);
      }

      // Video event handlers
      const video = document.getElementById('lesson-video');
      if (video) {
        let hasMarkedComplete = false;
        video.addEventListener('timeupdate', function() {
          const percentWatched = (video.currentTime / video.duration) * 100;
          if (percentWatched >= 90 && !hasMarkedComplete) {
            hasMarkedComplete = true;
            const completeBtn = document.getElementById('complete-lesson-btn');
            if (completeBtn && !completeBtn.disabled) {
              markAsComplete();
            }
          }
        });
        
        video.addEventListener('ended', function() {
          if (!hasMarkedComplete) {
            const completeBtn = document.getElementById('complete-lesson-btn');
            if (completeBtn && !completeBtn.disabled) {
              markAsComplete();
            }
          }
        });
      }
    });

    async function markAsComplete() {
      const completeBtn = document.getElementById('complete-lesson-btn');
      if (!completeBtn) return;
      
      completeBtn.disabled = true;
      completeBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
      
      // Use the pre-calculated courseId and lessonId
      console.log('Using course ID:', courseId);
      console.log('Using lesson ID:', lessonId);
      
      // Use the endpoint format that matches the backend controller
      const apiUrl = `/courses/${courseId}/lessons/${lessonId}/complete`;
      console.log('Complete API URL:', apiUrl);
      
      // Validate that we have both IDs before making the request
      if (!courseId || !lessonId) {
        console.error('Missing required IDs:', { courseId, lessonId });
        completeBtn.innerHTML = '<i class="fas fa-times-circle mr-2"></i> Error';
        completeBtn.disabled = false;
        showToast('Error: Missing course or lesson information.', 'error');
        return;
      }
      
      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();
        
        if (data.success) {
          completeBtn.innerHTML = '<i class="fas fa-check-circle mr-2"></i> Completed';
          completeBtn.classList.remove('bg-purple-500', 'hover:bg-purple-600');
          completeBtn.classList.add('bg-green-500', 'hover:bg-green-600');
          
          // Update progress bar
          const progressBar = document.querySelector('.bg-purple-500.h-2\\.5.rounded-full');
          const progressText = document.querySelectorAll('.text-sm.font-medium');
          if (progressBar) progressBar.style.width = `${data.progress}%`;
          progressText.forEach(el => el.textContent = `${data.progress}%`);
          
          showToast('Lesson marked as complete!', 'success');
          
          // Check if there's a next lesson button
          const nextLessonLinks = Array.from(document.querySelectorAll('a')).filter(a => 
            a.textContent.includes('Next Lesson')
          );
          const nextLessonBtn = nextLessonLinks.length > 0 ? nextLessonLinks[nextLessonLinks.length - 1] : null;
          
          if (nextLessonBtn) {
            // Automatically navigate to next lesson after a short delay
            setTimeout(() => {
              window.location.href = nextLessonBtn.href;
            }, 1500);
          } else {
            // No next lesson, reload to show completion state
            setTimeout(() => { window.location.reload(); }, 1500);
          }
        } else {
          completeBtn.innerHTML = '<i class="fas fa-times-circle mr-2"></i> Error';
          completeBtn.disabled = false;
          showToast(data.message || 'An error occurred.', 'error');
        }
      } catch (error) {
        console.error('Error marking lesson as complete:', error);
        completeBtn.innerHTML = '<i class="fas fa-times-circle mr-2"></i> Error';
        completeBtn.disabled = false;
        showToast('Network error while marking lesson as complete. Check console for details.', 'error');
      }
    }

    function startQuiz() {
      // Use the pre-calculated courseId and lessonId
      window.location.href = `/courses/${courseId}/quiz/${lessonId}`;
    }

    function showToast(message, type = 'info') {
      const toastColors = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        info: 'bg-purple-500'
      };
      
      const toast = document.createElement('div');
      toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg text-white ${toastColors[type] || toastColors.info} shadow-lg z-50 transition-opacity duration-300`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      setTimeout(() => {
        toast.classList.add('opacity-0');
        setTimeout(() => { toast.remove(); }, 300);
      }, 3000);
    }

    async function loadComments() {
      const commentsContainer = document.getElementById('comments-container');
      if (!commentsContainer) return;
      
      try {
        const response = await fetch(`/courses/${courseId}/lessons/${lessonId}/comments`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to load comments');
        }

        const data = await response.json();
        
        if (data.success && data.comments) {
          if (data.comments.length === 0) {
            commentsContainer.innerHTML = '<p class="text-center text-gray-400">No comments yet. Be the first to comment!</p>';
          } else {
            commentsContainer.innerHTML = '';
            data.comments.forEach(comment => {
              commentsContainer.insertAdjacentHTML('beforeend', createCommentHTML(comment));
            });
          }
        } else {
          commentsContainer.innerHTML = '<p class="text-center text-red-400">Could not load comments</p>';
        }
      } catch (error) {
        console.error('Error loading comments:', error);
        commentsContainer.innerHTML = '<p class="text-center text-red-400">Error loading comments. Please try again later.</p>';
      }
    }

    function createCommentHTML(comment) {
      return `
        <div class="flex gap-4">
          <div class="flex-shrink-0">
            <div class="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center">
              <i class="fas fa-user text-gray-300"></i>
            </div>
          </div>
          <div class="flex-1 bg-gray-700 rounded-lg p-4">
            <div class="flex justify-between items-center mb-2">
              <span class="font-medium">${comment.username}</span>
              <span class="text-xs text-gray-400">${comment.timestamp}</span>
            </div>
            <p class="text-gray-300">${comment.comment}</p>
          </div>
        </div>
      `;
    }

    async function postComment() {
      const commentTextarea = document.getElementById('comment-text');
      const postButton = document.getElementById('post-comment-btn');
      
      if (!commentTextarea || !postButton) return;
      
      const commentText = commentTextarea.value.trim();

      // If the textarea is empty, show an error toast and exit
      if (!commentText) {
        showToast('Please enter a comment.', 'error');
        return;
      }

      postButton.disabled = true;
      postButton.innerHTML = 'Posting...';

      try {
        const response = await fetch(`/courses/${courseId}/lessons/${lessonId}/comments`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ comment: commentText })
        });

        if (!response.ok) {
          throw new Error('Failed to post comment');
        }

        const data = await response.json();
        
        if (data.success) {
          // Create HTML for the new comment
          const newCommentHTML = createCommentHTML({
            username: data.username,
            comment: data.comment,
            timestamp: data.timestamp
          });
          
          const commentsContainer = document.getElementById('comments-container');
          if (commentsContainer) {
            // Check if there's a "no comments" message
            const noCommentsMsg = commentsContainer.querySelector('.text-center');
            if (noCommentsMsg) {
              commentsContainer.innerHTML = ''; // Clear "no comments" message
            }
            
            // Add the new comment to the top of the list
            commentsContainer.insertAdjacentHTML('afterbegin', newCommentHTML);
          }
          
          // Clear the textarea
          commentTextarea.value = '';
          showToast('Comment posted successfully!');
        } else {
          showToast('Error posting comment', 'error');
        }
      } catch (error) {
        console.error('Comment posting error:', error);
        showToast('Network error while posting comment', 'error');
      } finally {
        postButton.disabled = false;
        postButton.innerHTML = 'Post Comment';
      }
    }
  </script>
</body>
</html>
