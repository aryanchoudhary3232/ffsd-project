<%- include('../partials/head', { title: 'Course Details - SeekoBharat' }) %>
<style>
  body { background-color: #000; color: #fff; }
  .bg-white { background-color: #000 !important; color: #fff; }
  .bg-white .text-gray-600, .bg-white .text-gray-500, .bg-white .text-gray-700,
  .bg-white .text-gray-50, .bg-white .text-yellow-500, .bg-white .text-green-500,
  .bg-white .text-red-500, .bg-white .text-blue-500 { color: #fff !important; }
  input, select, textarea { background-color: #000; color: #fff; border: 1px solid #ccc; }
  .bg-primary { background-color: #000 !important; color: #fff !important; }
  .hover\:bg-primary-dark:hover { background-color: #f2f2f2 !important; color: #000 !important; }
  .bg-gray-50, .bg-gray-100, .bg-green-100, .bg-red-100 { background-color: #fff !important; color: #000 !important; border-color: #ccc !important; }
  .rating-stars i { cursor: pointer; margin-right: 5px; font-size: 1.5rem; }
  .rating-stars i.fas { color: #ffc107; }
  .rating-stars i.far { color: #e4e5e9; }
  .reviews-section { padding: 1.5rem; margin-top: 2rem; border-radius: 0.5rem; background-color: #1a1a1a; }
  .review-item { padding: 1rem; margin-bottom: 1rem; border-radius: 0.5rem; background-color: #2a2a2a; }
  .review-header { display: flex; justify-content: space-between; margin-bottom: 0.5rem; }
</style>
<body>
  <%- include('../partials/navbar') %>
  <div class="container mx-auto px-4 py-8">
    <div id="alerts"></div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="md:flex">
        <div class="md:w-2/3 p-6">
          <h1 id="course-title" class="text-3xl font-bold mb-2"></h1>
          <p id="course-description" class="text-gray-600 mb-4"></p>

          <div id="course-info" class="flex flex-wrap items-center gap-4 mb-6"></div>
          <div id="what-you-learn" class="mb-8 grid grid-cols-1 md:grid-cols-2 gap-2"></div>
          <div id="course-content" class="mb-8 border rounded-md overflow-hidden"></div>
          <div id="requirements" class="mb-8 list-disc pl-5 space-y-1 text-gray-700"></div>

          <!-- Reviews Section -->
          <div class="reviews-section mb-8">
            <h2 class="text-xl font-bold mb-4">Student Ratings & Reviews</h2>
            <div id="reviews-container">
              <div class="text-center py-4" id="loading-reviews">
                <i class="fas fa-spinner fa-spin mr-2"></i> Loading reviews...
              </div>
            </div>
            <div id="rating-container" class="mt-6"></div>
          </div>
        </div>

        <div class="md:w-1/3 bg-gray-700 text-white p-6">
          <div id="sidebar" class="sticky top-6"></div>
        </div>
      </div>
    </div>
  </div>

<%- include('../partials/footer') %> 
<%- include('../partials/scripts') %>

<script>
async function fetchCourseData() {
  const courseId = window.location.pathname.split('/').pop();
  try {
    const res = await fetch(`api/${courseId}`);
    const data = await res.json();
    if(!data.success) {
      document.getElementById('alerts').innerHTML = `<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">${data.message}</div>`;
      return;
    }
    populateCourse(data);
  } catch(err) { console.error(err); }
}

function initAddToCart() { 
  const addToCartBtn = document.getElementById('add-to-cart-btn'); 
  if (!addToCartBtn) return; 
  addToCartBtn.addEventListener('click', async function () { 
    const courseId = this.getAttribute('data-course-id'); 
    try { 
      const response = await fetch('/cart/add', 
      { method: 'POST',
       headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
        body: JSON.stringify({ courseId }) });
         const data = await response.json();
          if (data.success) {
             const cartCount = document.getElementById('cart-count');
              if (cartCount) { cartCount.textContent = data.cartCount;
                 cartCount.classList.remove('hidden');
                 }
               window.location.href = '/cart';
               } else { 
                alert(data.message || 'Failed to add course to cart.');
               }
               } catch (error)
                { console.error('Error adding course to cart:', error);
                 alert('Error adding course to cart.'); 
                } 
              }); 
            }


function populateCourse({ course, isEnrolled, progress, user }) {
  // Title & description
  document.getElementById('course-title').textContent = course.title;
  document.getElementById('course-description').textContent = course.description;

  // Info
  document.getElementById('course-info').innerHTML = `
    <div class="flex items-center">
      <span class="text-yellow-500 mr-1">★</span>
      <span class="font-semibold">${course.rating || 0}</span>
      <span class="text-gray-500 ml-1">(${course.students || 0} students)</span>
    </div>
    <div class="flex items-center">
      <i class="fas fa-user-tie text-gray-500 mr-2"></i>
      <span>Instructor: ${course.instructor}</span>
    </div>
    <div class="flex items-center">
      <i class="fas fa-globe text-gray-500 mr-2"></i>
      <span>Language: ${course.courseLanguage || 'English'}</span>
    </div>
    <div class="flex items-center">
      <i class="fas fa-calendar-alt text-gray-500 mr-2"></i>
      <span>Last updated: ${new Date(course.updatedAt).toLocaleDateString()}</span>
    </div>
  `;

  // What you'll learn
  const learnPoints = ["Build real-world applications","Master core concepts and techniques","Understand best practices","Gain practical skills for your career"];
  document.getElementById('what-you-learn').innerHTML = learnPoints.map(p => `
    <div class="flex items-start">
      <i class="fas fa-check text-green-500 mt-1 mr-2"></i>
      <span>${p}</span>
    </div>`).join('');

  // Course content
  document.getElementById('course-content').innerHTML = course.modules.map((module, idx) => `
    <div class="p-4">
      <div class="flex justify-between items-center cursor-pointer" onclick="toggleModule(${idx})">
        <h3 class="font-semibold">${module.title}</h3>
        <div class="flex items-center">
          <span class="text-sm text-gray-600 mr-2">${module.lessons.length} lessons</span>
          <i class="fas fa-chevron-down text-gray-500 module-icon-${idx}"></i>
        </div>
      </div>
      <div class="mt-4 space-y-2 hidden module-content-${idx}">
        ${module.lessons.map(lesson => `
          <div class="flex items-center pl-4">
            <i class="fas ${lesson.type==='video'?'fa-play-circle text-primary':lesson.type==='pdf'?'fa-file-pdf text-red-500':lesson.type==='quiz'?'fa-question-circle text-blue-500':'fa-file-alt text-gray-500'} mr-2"></i>
            <span>${lesson.title}</span>
            ${lesson.duration?`<span class="ml-auto text-sm text-gray-600">${lesson.duration}</span>`:''}
          </div>
        `).join('')}
      </div>
    </div>`).join('');

  // Requirements
  const reqs = ["Basic understanding of programming concepts","A computer with internet access","Enthusiasm to learn and practice"];
  document.getElementById('requirements').innerHTML = reqs.map(r => `<li>${r}</li>`).join('');

  // Sidebar
  document.getElementById('sidebar').innerHTML = `
    <img src="${course.thumbnail}" alt="${course.title}" class="w-full h-48 object-cover rounded-md mb-4"/>
    <div class="text-3xl font-bold mb-4">₹${course.price.toFixed(2)}</div>
    ${isEnrolled?`
      <div class="mb-4">
        <div class="flex justify-between text-sm mb-1">
          <span>Your progress</span>
          <span>${progress}%</span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-2.5">
          <div class="bg-primary h-2.5 rounded-full" style="width: ${progress}%"></div>
        </div>
      </div>
      <a href="/courses/${course._id}/learn" class="block w-full text-center bg-primary text-white py-3 px-4 rounded-md hover:bg-primary-dark transition-colors mb-3">
        <i class="fas fa-play-circle mr-2"></i> Start Learning
      </a>` : user?`<button id="add-to-cart-btn" data-course-id="${course._id}" class="block w-full text-center bg-white border border-primary text-primary py-3 px-4 rounded-md hover:bg-gray-50 transition-colors mb-3">Add to Cart</button>`:`<a href="/login" class="block w-full text-center bg-primary text-white py-3 px-4 rounded-md hover:bg-primary-dark transition-colors mb-3">Login to Enroll</a>`}`;

  // Ratings & reviews
  if(isEnrolled) {
    const ratingContainer = document.getElementById('rating-container');
    ratingContainer.innerHTML = `
      <h3 class="font-semibold mb-2">Rate this course:</h3>
      <div class="rating-stars mb-3" id="rating-stars">
        <i class="far fa-star" data-rating="1"></i>
        <i class="far fa-star" data-rating="2"></i>
        <i class="far fa-star" data-rating="3"></i>
        <i class="far fa-star" data-rating="4"></i>
        <i class="far fa-star" data-rating="5"></i>
        <span class="ml-2" id="rating-text">Select Rating</span>
      </div>
      <div class="mb-3">
        <label for="review" class="block text-sm font-medium mb-1">Write a review (optional):</label>
        <textarea id="review" rows="3" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
      </div>
      <button id="submit-rating" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Submit Review</button>
    `;
    initRating(course._id); // your existing rating JS function
  }

  initAddToCart(); // your existing add-to-cart function
  loadRatings(course._id); // Load ratings for this course
}

// Module toggle
function toggleModule(idx) {
  const content = document.querySelector(`.module-content-${idx}`);
  const icon = document.querySelector(`.module-icon-${idx}`);
  content.classList.toggle('hidden');
  icon.classList.toggle('fa-chevron-down');
  icon.classList.toggle('fa-chevron-up');
}

// Load ratings for the course
async function loadRatings(courseId) {
  const reviewsContainer = document.getElementById('reviews-container');
  const loadingReviews = document.getElementById('loading-reviews');
  
  try {
    const response = await fetch(`/courses/${courseId}/ratings`);
    const data = await response.json();
    
    if (loadingReviews) {
      loadingReviews.remove();
    }
    
    if (data.success && data.ratings && data.ratings.length > 0) {
      reviewsContainer.innerHTML = data.ratings.map(rating => `
        <div class="review-item">
          <div class="review-header">
            <div>
              <strong>${rating.username || 'Anonymous User'}</strong>
              <div class="text-yellow-500">
                ${'★'.repeat(rating.rating)}${'☆'.repeat(5 - rating.rating)}
              </div>
            </div>
            <div class="text-sm text-gray-400">
              ${rating.createdAt ? new Date(rating.createdAt).toLocaleDateString() : ''}
            </div>
          </div>
          ${rating.review ? `<p class="text-gray-300">${rating.review}</p>` : ''}
        </div>
      `).join('');
    } else {
      reviewsContainer.innerHTML = `
        <div class="text-center py-4 text-gray-400">
          <i class="fas fa-star-half-alt text-3xl mb-2"></i>
          <p>No reviews yet. Be the first to review this course!</p>
        </div>
      `;
    }
  } catch (error) {
    console.error('Error loading ratings:', error);
    if (loadingReviews) {
      loadingReviews.innerHTML = '<p class="text-red-500">Failed to load reviews.</p>';
    } else {
      reviewsContainer.innerHTML = '<p class="text-red-500">Failed to load reviews.</p>';
    }
  }
}

// Initialize rating submission for enrolled users
function initRating(courseId) {
  const ratingStars = document.getElementById('rating-stars');
  const submitButton = document.getElementById('submit-rating');
  const reviewTextarea = document.getElementById('review');
  const ratingText = document.getElementById('rating-text');
  
  if (!ratingStars || !submitButton) return;
  
  let selectedRating = 0;
  
  // Handle star clicks
  const stars = ratingStars.querySelectorAll('i');
  stars.forEach(star => {
    star.addEventListener('click', function() {
      selectedRating = parseInt(this.getAttribute('data-rating'));
      updateStars(selectedRating);
    });
    
    star.addEventListener('mouseenter', function() {
      const rating = parseInt(this.getAttribute('data-rating'));
      updateStars(rating);
    });
  });
  
  ratingStars.addEventListener('mouseleave', function() {
    updateStars(selectedRating);
  });
  
  function updateStars(rating) {
    stars.forEach((star, index) => {
      if (index < rating) {
        star.classList.remove('far');
        star.classList.add('fas');
      } else {
        star.classList.remove('fas');
        star.classList.add('far');
      }
    });
    ratingText.textContent = rating > 0 ? `${rating} Star${rating > 1 ? 's' : ''}` : 'Select Rating';
  }
  
  // Handle submit
  submitButton.addEventListener('click', async function() {
    if (selectedRating === 0) {
      alert('Please select a rating');
      return;
    }
    
    const review = reviewTextarea.value.trim();
    
    try {
      const response = await fetch(`/courses/${courseId}/ratings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          rating: selectedRating,
          review: review || null
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        alert('Thank you for your review!');
        // Reload ratings to show the new one
        await loadRatings(courseId);
        // Reset form
        selectedRating = 0;
        updateStars(0);
        reviewTextarea.value = '';
      } else {
        alert(data.message || 'Failed to submit rating');
      }
    } catch (error) {
      console.error('Error submitting rating:', error);
      alert('Error submitting rating. Please try again.');
    }
  });
  
  // Load user's existing rating if any
  loadUserRating(courseId, stars, reviewTextarea, (rating) => {
    selectedRating = rating;
    updateStars(rating);
  });
}

// Load user's existing rating
async function loadUserRating(courseId, stars, reviewTextarea, callback) {
  try {
    const response = await fetch(`/courses/${courseId}/ratings/user`);
    const data = await response.json();
    
    if (data.success && data.hasRated) {
      callback(data.rating);
      if (data.review) {
        reviewTextarea.value = data.review;
      }
    }
  } catch (error) {
    console.error('Error loading user rating:', error);
  }
}

// Initialize page
fetchCourseData();
</script>
