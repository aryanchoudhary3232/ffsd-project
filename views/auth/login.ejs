<%- include('../partials/head', { title: 'Login - SeekoBharat' }) %>
<body class="bg-black">
  <%- include('../partials/navbar') %>

  <div class="container mx-auto px-4 py-8 bg-black">
    <div class="max-w-md mx-auto bg-black text-white  rounded-lg shadow-md overflow-hidden">
      <div class="py-4 px-6 bg-primary text-white">
        <h2 class="text-xl font-bold">Login to SeekoBharat</h2>
      </div>
      <div class="py-4 px-6">
        <% if(error_msg && error_msg.length > 0) { %>
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <%= error_msg %>
          </div>
        <% } %>
        
        <form action="/login" method="POST" id="loginForm">
          <div class="mb-4">
            <label for="email" class="block text-gray-400 font-medium mb-2">Email</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required 
              pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
              title="Please enter a valid email address (e.g., user@example.com)"
              class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white"
              placeholder="Enter your email address"
              autocomplete="email"
            >
            <div id="email-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <div class="mb-6">
            <label for="password" class="block text-gray-400 font-medium mb-2">Password</label>
            <input 
              type="password" 
              id="password" 
              name="password" 
              required 
              minlength="6"
              class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white"
              placeholder="Enter your password"
              autocomplete="current-password"
            >
            <div id="password-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <input type="checkbox" id="remember" name="remember" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded">
              <label for="remember" class="ml-2 block text-sm text-gray-400">Remember me</label>
            </div>
            <a href="#" class="text-sm text-primary hover:underline">Forgot password?</a>
          </div>
          <button type="submit" id="loginBtn" class="w-full bg-gray-900 text-white py-2 px-4 rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            Login
          </button>
        </form>
        <div class="mt-6 text-center">
          <p class="text-sm text-gray-400">Don't have an account? <a href="/register" class="text-primary hover:underline">Register</a></p>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('loginForm');
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      const loginBtn = document.getElementById('loginBtn');

      // Error display elements
      const emailError = document.getElementById('email-error');
      const passwordError = document.getElementById('password-error');

      // Validation functions
      function validateEmail(email) {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email);
      }

      function hasInvalidCharacters(email) {
        const invalidChars = /[!~#$%^&*()=+\[\]{}|\\:";'<>?,/]/;
        return invalidChars.test(email.replace(/[a-zA-Z0-9._%+-@]/g, ''));
      }

      function showError(input, errorElement, message) {
        input.classList.add('border-red-500');
        input.classList.remove('border-gray-300');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }

      function hideError(input, errorElement) {
        input.classList.remove('border-red-500');
        input.classList.add('border-gray-300');
        errorElement.classList.add('hidden');
      }

      // Real-time email validation
      emailInput.addEventListener('input', function() {
        const email = this.value.trim();
        
        if (email === '') {
          hideError(this, emailError);
          return;
        }

        // Check for invalid characters first
        if (hasInvalidCharacters(email)) {
          showError(this, emailError, 'Email contains invalid characters. Only letters, numbers, @, ., _, %, +, - are allowed.');
          return;
        }

        // Check email format
        if (!validateEmail(email)) {
          if (!email.includes('@')) {
            showError(this, emailError, 'Email must contain @ symbol.');
          } else if (email.indexOf('@') !== email.lastIndexOf('@')) {
            showError(this, emailError, 'Email can only contain one @ symbol.');
          } else if (!email.includes('.')) {
            showError(this, emailError, 'Email must contain a domain (e.g., .com, .org).');
          } else {
            showError(this, emailError, 'Please enter a valid email format (e.g., user@example.com).');
          }
        } else {
          hideError(this, emailError);
        }
      });

      // Prevent invalid characters in email field
      emailInput.addEventListener('keypress', function(e) {
        const char = String.fromCharCode(e.which);
        const invalidChars = /[!~#$%^&*()=+\[\]{}|\\:";'<>?,/]/;
        
        if (invalidChars.test(char)) {
          e.preventDefault();
          // Show temporary warning
          showError(this, emailError, 'Invalid character. Only letters, numbers, @, ., _, %, +, - are allowed.');
          
          // Hide warning after 2 seconds
          setTimeout(() => {
            if (emailError.textContent.includes('Invalid character')) {
              hideError(this, emailError);
            }
          }, 2000);
        }
      });

      // Real-time password validation
      passwordInput.addEventListener('input', function() {
        const password = this.value;
        
        if (password === '') {
          hideError(this, passwordError);
          return;
        }

        if (password.length < 6) {
          showError(this, passwordError, 'Password must be at least 6 characters long.');
        } else {
          hideError(this, passwordError);
        }
      });

      // Form submission validation
      form.addEventListener('submit', function(e) {
        const email = emailInput.value.trim();
        const password = passwordInput.value;
        let isValid = true;

        // Reset error states
        hideError(emailInput, emailError);
        hideError(passwordInput, passwordError);

        // Validate email
        if (email === '') {
          showError(emailInput, emailError, 'Email is required.');
          isValid = false;
        } else if (hasInvalidCharacters(email)) {
          showError(emailInput, emailError, 'Email contains invalid characters.');
          isValid = false;
        } else if (!validateEmail(email)) {
          showError(emailInput, emailError, 'Please enter a valid email address.');
          isValid = false;
        }

        // Validate password
        if (password === '') {
          showError(passwordInput, passwordError, 'Password is required.');
          isValid = false;
        } else if (password.length < 6) {
          showError(passwordInput, passwordError, 'Password must be at least 6 characters long.');
          isValid = false;
        }

        // Prevent form submission if validation fails
        if (!isValid) {
          e.preventDefault();
          
          // Focus on first error field
          if (emailInput.classList.contains('border-red-500')) {
            emailInput.focus();
          } else if (passwordInput.classList.contains('border-red-500')) {
            passwordInput.focus();
          }
        } else {
          // Show loading state
          loginBtn.disabled = true;
          loginBtn.textContent = 'Logging in...';
        }
      });

      // Enable/disable login button based on input validity
      function checkFormValidity() {
        const email = emailInput.value.trim();
        const password = passwordInput.value;
        
        if (email && password && password.length >= 6 && validateEmail(email) && !hasInvalidCharacters(email)) {
          loginBtn.disabled = false;
          loginBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        } else {
          loginBtn.disabled = true;
          loginBtn.classList.add('opacity-50', 'cursor-not-allowed');
        }
      }

      // Check form validity on input
      emailInput.addEventListener('input', checkFormValidity);
      passwordInput.addEventListener('input', checkFormValidity);
      
      // Initial check
      checkFormValidity();
    });
  </script>
</body>
</html>

