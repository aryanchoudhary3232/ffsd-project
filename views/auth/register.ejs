<%- include('../partials/head', { title: 'Register - SeekoBharat' }) %>
<body class="bg-black">
  <%- include('../partials/navbar') %>

  <div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto bg-black rounded-lg shadow-md overflow-hidden">
      <div class="py-4 px-6 bg-primary text-white">
        <h2 class="text-xl font-bold">Create an Account</h2>
      </div>
      <div class="py-4 px-6">
        <% if(error_msg && error_msg.length > 0) { %>
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <%= error_msg %>
          </div>
        <% } %>
        
        <% if(typeof errors !== 'undefined' && errors.length > 0) { %>
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <ul class="list-disc pl-4">
              <% errors.forEach(function(error) { %>
                <li><%= error %></li>
              <% }); %>
            </ul>
          </div>
        <% } %>
        
        <form action="/register" method="POST">
          <div class="mb-4">
            <label for="name" class="block text-gray-400 font-medium mb-2 text-white">Full Name</label>
            <input type="text" id="name" name="name" oninput="this.value = this.value.replace(/[^a-zA-Z ]/g, '')"   value="<%= typeof name !== 'undefined' ? name : '' %>" required class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white">
          </div>
          <div class="mb-4">
            <label for="email" class="block text-gray-400 font-medium mb-2">Email</label>
            <input type="email" id="email" name="email" value="<%= typeof email !== 'undefined' ? email : '' %>" 
                required  
                pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"  
                class="w-full px-3 py-2 bg-gray-700 placeholder-gray-400 border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white" 
                oninvalid="this.setCustomValidity('Please enter a valid email address.')" 
                oninput="this.setCustomValidity('')">
          </div>
          <div class="mb-4">
            <label for="password" class="block text-gray-400 font-medium mb-2">Password</label>
            <input type="password" id="password" name="password" required class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white">
            <p class="text-xs text-gray-500 mt-1">Password must be at least 6 characters</p>
          </div>
          <div class="mb-4">
            <label for="confirmPassword" class="block text-gray-400 font-medium mb-2">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white">
          </div>
          <div class="mb-6">
            <label for="role" class="block text-gray-400 font-medium mb-2">I want to join as</label>
            <select id="role" name="role" class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary  text-white">
              <option value="student" <%= typeof role !== 'undefined' && role === 'student' ? 'selected' : '' %>>Student</option>
              <option value="instructor" <%= typeof role !== 'undefined' && role === 'instructor' ? 'selected' : '' %>>Instructor</option>
            </select>
          </div>
          <button type="submit" class="w-full bg-gray-900 text-white py-2 px-4 rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            Register
          </button>
        </form>
        <div class="mt-6 text-center">
          <p class="text-sm text-gray-600">Already have an account? <a href="/login" class="text-primary hover:underline">Login</a></p>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.querySelector('form[action="/register"]');
      const submitButton = form.querySelector('button[type="submit"]');
      const passwordInput = document.getElementById('password');
      const confirmPasswordInput = document.getElementById('confirmPassword');

      form.addEventListener('submit', async function(event) {
        event.preventDefault();

        // Client-side validation
        if (passwordInput.value !== confirmPasswordInput.value) {
          showMessage(['Passwords do not match'], 'error');
          return;
        }

        if (passwordInput.value.length < 6) {
          showMessage(['Password must be at least 6 characters'], 'error');
          return;
        }

        const formData = new FormData(form);
        const originalButtonText = submitButton.textContent;

        try {
          submitButton.disabled = true;
          submitButton.textContent = 'Creating account...';

          const response = await fetch('/register', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              name: formData.get('name'),
              email: formData.get('email'),
              password: formData.get('password'),
              confirmPassword: formData.get('confirmPassword'),
              role: formData.get('role')
            })
          });

          const data = await response.json();

          if (data.success) {
            showMessage([data.message], 'success');
            setTimeout(() => {
              window.location.href = data.redirectUrl;
            }, 500);
          } else {
            showMessage(data.errors || [data.message], 'error');
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
          }
        } catch (error) {
          console.error('Registration error:', error);
          showMessage(['An error occurred during registration. Please try again.'], 'error');
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      });

      function showMessage(errors, type) {
        const existingMessage = document.querySelector('.auth-message');
        if (existingMessage) {
          existingMessage.remove();
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `auth-message px-4 py-3 rounded mb-4 ${
          type === 'success' 
            ? 'bg-green-100 border border-green-400 text-green-700' 
            : 'bg-red-100 border border-red-400 text-red-700'
        }`;

        if (Array.isArray(errors) && errors.length > 1) {
          const ul = document.createElement('ul');
          ul.className = 'list-disc pl-4';
          errors.forEach(error => {
            const li = document.createElement('li');
            li.textContent = error;
            ul.appendChild(li);
          });
          messageDiv.appendChild(ul);
        } else {
          messageDiv.textContent = Array.isArray(errors) ? errors[0] : errors;
        }

        const formContainer = form.parentElement;
        formContainer.insertBefore(messageDiv, form);
      }
    });
  </script>
</body>
</html>

