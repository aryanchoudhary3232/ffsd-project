<%- include('../partials/head', { title: 'Register - SeekoBharat' }) %>
<body class="bg-black">
  <%- include('../partials/navbar') %>

  <div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto bg-black rounded-lg shadow-md overflow-hidden">
      <div class="py-4 px-6 bg-primary text-white">
        <h2 class="text-xl font-bold">Create an Account</h2>
      </div>
      <div class="py-4 px-6">
        <% if(error_msg && error_msg.length > 0) { %>
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <%= error_msg %>
          </div>
        <% } %>
        
        <% if(typeof errors !== 'undefined' && errors.length > 0) { %>
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <ul class="list-disc pl-4">
              <% errors.forEach(function(error) { %>
                <li><%= error %></li>
              <% }); %>
            </ul>
          </div>
        <% } %>
        
        <form action="/register" method="POST" id="registerForm">
          <div class="mb-4">
            <label for="name" class="block text-gray-400 font-medium mb-2 text-white">Full Name</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              value="<%= typeof name !== 'undefined' ? name : '' %>" 
              required 
              minlength="2"
              maxlength="50"
              pattern="[a-zA-Z\s]{2,50}"
              title="Name should be 2-50 characters and contain only letters and spaces"
              class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white"
              placeholder="Enter your full name"
              autocomplete="name"
            >
            <div id="name-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <div class="mb-4">
            <label for="email" class="block text-gray-400 font-medium mb-2">Email</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              value="<%= typeof email !== 'undefined' ? email : '' %>" 
              required  
              pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"  
              title="Please enter a valid email address (e.g., user@example.com)"
              class="w-full px-3 py-2 bg-gray-700 placeholder-gray-400 border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white" 
              placeholder="Enter your email address"
              autocomplete="email"
            >
            <div id="email-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <div class="mb-4">
            <label for="password" class="block text-gray-400 font-medium mb-2">Password</label>
            <input 
              type="password" 
              id="password" 
              name="password" 
              required 
              minlength="6"
              class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white"
              placeholder="Enter your password"
              autocomplete="new-password"
            >
            <div id="password-error" class="text-red-500 text-sm mt-1 hidden"></div>
            <div class="text-xs text-gray-400 mt-1">
              Password must be at least 6 characters and contain:
              <ul class="list-disc list-inside mt-1 text-xs">
                <li id="length-check" class="text-red-400">At least 6 characters</li>
                <li id="letter-check" class="text-red-400">At least one letter</li>
                <li id="number-check" class="text-red-400">At least one number</li>
              </ul>
            </div>
          </div>
          <div class="mb-4">
            <label for="confirmPassword" class="block text-gray-400 font-medium mb-2">Confirm Password</label>
            <input 
              type="password" 
              id="confirmPassword" 
              name="confirmPassword" 
              required 
              class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white"
              placeholder="Confirm your password"
              autocomplete="new-password"
            >
            <div id="confirm-password-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <div class="mb-6">
            <label for="role" class="block text-gray-400 font-medium mb-2">I want to join as</label>
            <select 
              id="role" 
              name="role" 
              required
              class="w-full px-3 py-2 bg-gray-700 placeholder-white border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary text-white"
            >
              <option value="">Select your role</option>
              <option value="student" <%= typeof role !== 'undefined' && role === 'student' ? 'selected' : '' %>>Student</option>
              <option value="instructor" <%= typeof role !== 'undefined' && role === 'instructor' ? 'selected' : '' %>>Instructor</option>
            </select>
            <div id="role-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <button type="submit" id="registerBtn" class="w-full bg-gray-900 text-white py-2 px-4 rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary opacity-50 cursor-not-allowed" disabled>
            Register
          </button>
        </form>
        <div class="mt-6 text-center">
          <p class="text-sm text-gray-600">Already have an account? <a href="/login" class="text-primary hover:underline">Login</a></p>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('registerForm');
      const nameInput = document.getElementById('name');
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      const confirmPasswordInput = document.getElementById('confirmPassword');
      const roleSelect = document.getElementById('role');
      const registerBtn = document.getElementById('registerBtn');

      // Error display elements
      const nameError = document.getElementById('name-error');
      const emailError = document.getElementById('email-error');
      const passwordError = document.getElementById('password-error');
      const confirmPasswordError = document.getElementById('confirm-password-error');
      const roleError = document.getElementById('role-error');

      // Password strength indicators
      const lengthCheck = document.getElementById('length-check');
      const letterCheck = document.getElementById('letter-check');
      const numberCheck = document.getElementById('number-check');

      // Validation functions
      function validateName(name) {
        const nameRegex = /^[a-zA-Z\s]{2,50}$/;
        return nameRegex.test(name.trim());
      }

      function validateEmail(email) {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email);
      }

      function hasInvalidEmailCharacters(email) {
        const invalidChars = /[!~#$%^&*()=+\[\]{}|\\:";'<>?,/]/;
        return invalidChars.test(email.replace(/[a-zA-Z0-9._%+-@]/g, ''));
      }

      function validatePassword(password) {
        return {
          length: password.length >= 6,
          letter: /[a-zA-Z]/.test(password),
          number: /[0-9]/.test(password)
        };
      }

      function updatePasswordChecks(password) {
        const checks = validatePassword(password);
        
        // Update visual indicators
        lengthCheck.classList.toggle('text-green-400', checks.length);
        lengthCheck.classList.toggle('text-red-400', !checks.length);
        
        letterCheck.classList.toggle('text-green-400', checks.letter);
        letterCheck.classList.toggle('text-red-400', !checks.letter);
        
        numberCheck.classList.toggle('text-green-400', checks.number);
        numberCheck.classList.toggle('text-red-400', !checks.number);
        
        return checks.length && checks.letter && checks.number;
      }

      function showError(input, errorElement, message) {
        input.classList.add('border-red-500');
        input.classList.remove('border-gray-300');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }

      function showSuccess(input, errorElement) {
        input.classList.remove('border-red-500');
        input.classList.add('border-green-500');
        errorElement.classList.add('hidden');
      }

      function hideError(input, errorElement) {
        input.classList.remove('border-red-500', 'border-green-500');
        input.classList.add('border-gray-300');
        errorElement.classList.add('hidden');
      }

      // Real-time name validation
      nameInput.addEventListener('input', function() {
        const name = this.value.trim();
        
        if (name === '') {
          hideError(this, nameError);
          return;
        }

        if (!validateName(name)) {
          if (name.length < 2) {
            showError(this, nameError, 'Name must be at least 2 characters long.');
          } else if (name.length > 50) {
            showError(this, nameError, 'Name must be less than 50 characters.');
          } else {
            showError(this, nameError, 'Name should only contain letters and spaces.');
          }
        } else {
          showSuccess(this, nameError);
        }
      });

      // Prevent invalid characters in name field
      nameInput.addEventListener('keypress', function(e) {
        const char = String.fromCharCode(e.which);
        if (!/[a-zA-Z\s]/.test(char)) {
          e.preventDefault();
          showError(this, nameError, 'Only letters and spaces are allowed in name.');
          setTimeout(() => {
            if (nameError.textContent.includes('Only letters and spaces')) {
              hideError(this, nameError);
            }
          }, 2000);
        }
      });

      // Email validation
      emailInput.addEventListener('input', function() {
        const email = this.value.trim();
        
        if (email === '') {
          hideError(this, emailError);
          return;
        }

        if (hasInvalidEmailCharacters(email)) {
          showError(this, emailError, 'Email contains invalid characters. Only letters, numbers, @, ., _, %, +, - are allowed.');
          return;
        }

        if (!validateEmail(email)) {
          if (!email.includes('@')) {
            showError(this, emailError, 'Email must contain @ symbol.');
          } else if (email.indexOf('@') !== email.lastIndexOf('@')) {
            showError(this, emailError, 'Email can only contain one @ symbol.');
          } else if (!email.includes('.')) {
            showError(this, emailError, 'Email must contain a domain (e.g., .com, .org).');
          } else {
            showError(this, emailError, 'Please enter a valid email format (e.g., user@example.com).');
          }
        } else {
          showSuccess(this, emailError);
        }
      });

      // Prevent invalid characters in email field
      emailInput.addEventListener('keypress', function(e) {
        const char = String.fromCharCode(e.which);
        const invalidChars = /[!~#$%^&*()=+\[\]{}|\\:";'<>?,/]/;
        
        if (invalidChars.test(char)) {
          e.preventDefault();
          showError(this, emailError, 'Invalid character. Only letters, numbers, @, ., _, %, +, - are allowed.');
          setTimeout(() => {
            if (emailError.textContent.includes('Invalid character')) {
              hideError(this, emailError);
            }
          }, 2000);
        }
      });

      // Password validation
      passwordInput.addEventListener('input', function() {
        const password = this.value;
        
        if (password === '') {
          hideError(this, passwordError);
          updatePasswordChecks('');
          return;
        }

        const isValid = updatePasswordChecks(password);
        
        if (!isValid) {
          showError(this, passwordError, 'Password must meet all requirements above.');
        } else {
          showSuccess(this, passwordError);
        }
      });

      // Confirm password validation
      confirmPasswordInput.addEventListener('input', function() {
        const password = passwordInput.value;
        const confirmPassword = this.value;
        
        if (confirmPassword === '') {
          hideError(this, confirmPasswordError);
          return;
        }

        if (password !== confirmPassword) {
          showError(this, confirmPasswordError, 'Passwords do not match.');
        } else {
          showSuccess(this, confirmPasswordError);
        }
      });

      // Role validation
      roleSelect.addEventListener('change', function() {
        if (this.value === '') {
          showError(this, roleError, 'Please select your role.');
        } else {
          showSuccess(this, roleError);
        }
      });

      // Form submission validation
      form.addEventListener('submit', async function(e) {
        e.preventDefault(); // Always prevent default to use fetch
        
        const name = nameInput.value.trim();
        const email = emailInput.value.trim();
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        const role = roleSelect.value;
        let isValid = true;

        // Reset error states
        hideError(nameInput, nameError);
        hideError(emailInput, emailError);
        hideError(passwordInput, passwordError);
        hideError(confirmPasswordInput, confirmPasswordError);
        hideError(roleSelect, roleError);

        // Validate name
        if (name === '') {
          showError(nameInput, nameError, 'Name is required.');
          isValid = false;
        } else if (!validateName(name)) {
          showError(nameInput, nameError, 'Please enter a valid name (2-50 characters, letters and spaces only).');
          isValid = false;
        }

        // Validate email
        if (email === '') {
          showError(emailInput, emailError, 'Email is required.');
          isValid = false;
        } else if (hasInvalidEmailCharacters(email)) {
          showError(emailInput, emailError, 'Email contains invalid characters.');
          isValid = false;
        } else if (!validateEmail(email)) {
          showError(emailInput, emailError, 'Please enter a valid email address.');
          isValid = false;
        }

        // Validate password
        if (password === '') {
          showError(passwordInput, passwordError, 'Password is required.');
          isValid = false;
        } else {
          const passwordChecks = validatePassword(password);
          if (!passwordChecks.length || !passwordChecks.letter || !passwordChecks.number) {
            showError(passwordInput, passwordError, 'Password must meet all requirements above.');
            isValid = false;
          }
        }

        // Validate confirm password
        if (confirmPassword === '') {
          showError(confirmPasswordInput, confirmPasswordError, 'Please confirm your password.');
          isValid = false;
        } else if (password !== confirmPassword) {
          showError(confirmPasswordInput, confirmPasswordError, 'Passwords do not match.');
          isValid = false;
        }

        // Validate role
        if (role === '') {
          showError(roleSelect, roleError, 'Please select your role.');
          isValid = false;
        }

        // Prevent form submission if validation fails
        if (!isValid) {
          // Focus on first error field
          if (nameInput.classList.contains('border-red-500')) {
            nameInput.focus();
          } else if (emailInput.classList.contains('border-red-500')) {
            emailInput.focus();
          } else if (passwordInput.classList.contains('border-red-500')) {
            passwordInput.focus();
          } else if (confirmPasswordInput.classList.contains('border-red-500')) {
            confirmPasswordInput.focus();
          } else if (roleSelect.classList.contains('border-red-500')) {
            roleSelect.focus();
          }
          return;
        }

        // Show loading state
        registerBtn.disabled = true;
        const originalText = registerBtn.textContent;
        registerBtn.textContent = 'Creating account...';

        try {
          // Use fetch API to submit registration
          const response = await fetch('/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ 
              name: name,
              email: email, 
              password: password,
              confirmPassword: confirmPassword,
              role: role
            })
          });

          const data = await response.json();

          if (!response.ok) {
            // Handle error response
            if (data.errors && Array.isArray(data.errors)) {
              throw new Error(data.errors.join(', '));
            } else {
              throw new Error(data.error || 'Registration failed');
            }
          }

          // Registration successful
          if (data.success && data.redirectUrl) {
            // Redirect to the appropriate dashboard
            window.location.href = data.redirectUrl;
          } else {
            throw new Error('Invalid response from server');
          }
        } catch (error) {
          console.error('Registration error:', error);
          
          // Show error message to user
          const errorDiv = document.createElement('div');
          errorDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4';
          
          // Check if it's multiple errors or single error
          if (error.message.includes(',')) {
            const errors = error.message.split(',').map(e => e.trim());
            errorDiv.innerHTML = '<ul class="list-disc pl-4">' + 
              errors.map(e => `<li>${e}</li>`).join('') + 
              '</ul>';
          } else {
            errorDiv.textContent = error.message || 'An error occurred during registration.';
          }
          
          // Insert error message at the top of the form
          const formContainer = form.parentElement;
          const existingError = formContainer.querySelector('.bg-red-100');
          if (existingError) {
            existingError.remove();
          }
          formContainer.insertBefore(errorDiv, form);

          // Reset button state
          registerBtn.disabled = false;
          registerBtn.textContent = originalText;
        }
      });

      // Enable/disable register button based on form validity
      function checkFormValidity() {
        const name = nameInput.value.trim();
        const email = emailInput.value.trim();
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        const role = roleSelect.value;
        
        const isNameValid = validateName(name);
        const isEmailValid = validateEmail(email) && !hasInvalidEmailCharacters(email);
        const passwordChecks = validatePassword(password);
        const isPasswordValid = passwordChecks.length && passwordChecks.letter && passwordChecks.number;
        const isConfirmPasswordValid = password === confirmPassword && confirmPassword !== '';
        const isRoleValid = role !== '';
        
        if (isNameValid && isEmailValid && isPasswordValid && isConfirmPasswordValid && isRoleValid) {
          registerBtn.disabled = false;
          registerBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        } else {
          registerBtn.disabled = true;
          registerBtn.classList.add('opacity-50', 'cursor-not-allowed');
        }
      }
es.status(400).json({ 
        success: false, 
        error: "Please fill in all fields" 
      });
      // Check form validity on input
      nameInput.addEventListener('input', checkFormValidity);
      emailInput.addEventListener('input', checkFormValidity);
      passwordInput.addEventListener('input', checkFormValidity);
      confirmPasswordInput.addEventListener('input', checkFormValidity);
      roleSelect.addEventListener('change', checkFormValidity);
      
      // Initial check
      checkFormValidity();
    });
  </script>
</body>
</html>

