<%- include('../partials/head', { title: isEdit ? 'Edit Course - SeekoBharat' : 'Add New Course - SeekoBharat' }) %>
<body class="bg-black text-white">
  <%- include('../partials/navbar') %>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6"><%= isEdit ? 'Edit Course' : 'Add New Course' %></h1>

    <!-- Alerts -->
    <% if (success_msg && success_msg.length > 0) { %>
      <div class="bg-green-800 border border-green-600 text-green-300 px-4 py-3 rounded mb-4">
        <%= success_msg %>
      </div>
    <% } %>
    <% if (error_msg && error_msg.length > 0) { %>
      <div class="bg-red-800 border border-red-600 text-red-300 px-4 py-3 rounded mb-4">
        <%= error_msg %>
      </div>
    <% } %>

    <form 
      id="courseForm"
      class="bg-gray-800 p-6 rounded-lg"
      novalidate
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium text-gray-300">Course Title</label>
          <input 
            type="text" 
            id="title" 
            name="title" 
            value="<%= isEdit ? course.title : '' %>" 
            required
            minlength="5"
            maxlength="100"
            class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
          <div class="error-message text-red-500 text-sm mt-1 hidden" id="title-error"></div>
        </div>

        <!-- Category -->
        <div>
          <label for="category" class="block text-sm font-medium text-gray-300">Category</label>
          <input 
            type="text" 
            id="category" 
            name="category" 
            value="<%= isEdit ? course.category : '' %>" 
            required
            class="bg-gray-800 text-white rounded-md px-3 py-2 w-full border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            list="category-list"
          >
          <datalist id="category-list">
            <% if (typeof categories !== 'undefined' && categories) { %>
              <% categories.forEach(cat => { %>
                <option value="<%= cat %>">
              <% }) %>
            <% } %>
          </datalist>
          <div class="error-message text-red-500 text-sm mt-1 hidden" id="category-error"></div>
        </div>

        <!-- Price -->
        <div>
          <label for="price" class="block text-sm font-medium text-gray-300">Price ($)</label>
          <input 
            type="number" 
            id="price" 
            name="price" 
            step="0.01" 
            min="0"
            max="9999.99"
            value="<%= isEdit ? course.price : '' %>" 
            required
            class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
          <div class="error-message text-red-500 text-sm mt-1 hidden" id="price-error"></div>
        </div>

        <!-- Language (Updated to Dropdown) -->
        <div>
          <label for="language" class="block text-sm font-medium text-gray-300">Language</label>
          <select 
            id="language" 
            name="language" 
            required
            class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">-- Select a language --</option>
            <option value="English" <%= isEdit && course.courseLanguage === 'English' ? 'selected' : !isEdit ? 'selected' : '' %>>English</option>
            <option value="Hindi" <%= isEdit && course.courseLanguage === 'Hindi' ? 'selected' : '' %>>Hindi</option>
            <option value="Marathi" <%= isEdit && course.courseLanguage === 'Marathi' ? 'selected' : '' %>>Marathi</option>
            <option value="Telugu" <%= isEdit && course.courseLanguage === 'Telugu' ? 'selected' : '' %>>Telugu</option>
            <option value="Malayalam" <%= isEdit && course.courseLanguage === 'Malayalam' ? 'selected' : '' %>>Malayalam</option>
            <option value="Kannada" <%= isEdit && course.courseLanguage === 'Kannada' ? 'selected' : '' %>>Kannada</option>
            <option value="Marwadi" <%= isEdit && course.courseLanguage === 'Marwadi' ? 'selected' : '' %>>Marwadi</option>
            <option value="Haryanvi" <%= isEdit && course.courseLanguage === 'Haryanvi' ? 'selected' : '' %>>Haryanvi</option>
            <option value="Tamil" <%= isEdit && course.courseLanguage === 'Tamil' ? 'selected' : '' %>>Tamil</option>
            <option value="Bengali" <%= isEdit && course.courseLanguage === 'Bengali' ? 'selected' : '' %>>Bengali</option>
            <option value="Gujarati" <%= isEdit && course.courseLanguage === 'Gujarati' ? 'selected' : '' %>>Gujarati</option>
            <option value="Punjabi" <%= isEdit && course.courseLanguage === 'Punjabi' ? 'selected' : '' %>>Punjabi</option>
            <option value="Odia" <%= isEdit && course.courseLanguage === 'Odia' ? 'selected' : '' %>>Odia</option>
            <option value="Bhojpuri" <%= isEdit && course.courseLanguage === 'Bhojpuri' ? 'selected' : '' %>>Bhojpuri</option>
          </select>
          <div class="error-message text-red-500 text-sm mt-1 hidden" id="language-error"></div>
        </div>

        <!-- Thumbnail -->
        <div>
          <label for="thumbnail" class="block text-sm font-medium text-gray-300">Thumbnail</label>
          <input 
            type="file" 
            id="thumbnail" 
            name="thumbnail" 
            accept="image/*"
            <%= isEdit ? '' : 'required' %>
            class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
          <div class="error-message text-red-500 text-sm mt-1 hidden" id="thumbnail-error"></div>
          <% if (isEdit && course.thumbnail) { %>
            <img src="<%= course.thumbnail %>" alt="Current Thumbnail" class="mt-2 w-32 h-32 object-cover rounded-md">
            <p class="text-xs text-gray-400 mt-1">Current thumbnail will be kept if no new file is selected</p>
          <% } %>
        </div>

        <!-- Description -->
        <div class="md:col-span-2">
          <label for="description" class="block text-sm font-medium text-gray-300">Description</label>
          <textarea 
            id="description" 
            name="description" 
            rows="4"
            minlength="20" 
            maxlength="1000"
            required
            class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          ><%= isEdit ? course.description : '' %></textarea>
          <div class="error-message text-red-500 text-sm mt-1 hidden" id="description-error"></div>
          <div class="text-xs text-gray-400 mt-1"><span id="description-count">0</span>/1000 characters</div>
        </div>
      </div>

      <div class="mt-6 flex gap-4">
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors">
          <%= isEdit ? 'Update Course' : 'Create Course' %>
        </button>
        <a href="/instructor/courses" class="bg-gray-700 text-gray-300 px-4 py-2 rounded-md hover:bg-gray-600 transition-colors">Cancel</a>
      </div>
    </form>
  </div>
  <%- include('../partials/footer') %>
  <%- include('../partials/scripts') %>
  
  <!-- Form validation script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('courseForm');
      const titleInput = document.getElementById('title');
      const categoryInput = document.getElementById('category');
      const priceInput = document.getElementById('price');
      const languageSelect = document.getElementById('language');
      const thumbnailInput = document.getElementById('thumbnail');
      const descriptionInput = document.getElementById('description');
      const descriptionCount = document.getElementById('description-count');
      
      // Update character count for description
      function updateCharCount() {
        const currentLength = descriptionInput.value.length;
        descriptionCount.textContent = currentLength;
        if (currentLength > 1000) {
          descriptionCount.classList.add('text-red-500');
        } else {
          descriptionCount.classList.remove('text-red-500');
        }
      }
      
      // Initial character count
      updateCharCount();
      
      // Update character count on input
      descriptionInput.addEventListener('input', updateCharCount);
      
      // Validate file type and size
      function validateFile(file) {
        if (!file) return true;
        
        // Check file type
        const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        if (!validTypes.includes(file.type)) {
          return "Please select a valid image file (JPEG, PNG, GIF, or WEBP)";
        }
        
        // Check file size (max 5MB)
        const maxSize = 5 * 1024 * 1024; // 5MB in bytes
        if (file.size > maxSize) {
          return "Image size must be less than 5MB";
        }
        
        return true;
      }
      
      // Show error message
      function showError(element, message) {
        const errorElement = document.getElementById(`${element.id}-error`);
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
        element.classList.add('border-red-500');
      }
      
      // Clear error message
      function clearError(element) {
        const errorElement = document.getElementById(`${element.id}-error`);
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
        element.classList.remove('border-red-500');
      }
      
      // Form submission handler with fetch
      form.addEventListener('submit', async function(event) {
        event.preventDefault(); // Always prevent default
        
        let isValid = true;
        
        // Clear all previous errors
        document.querySelectorAll('.error-message').forEach(el => {
          el.textContent = '';
          el.classList.add('hidden');
        });
        
        // Title validation
        if (!titleInput.value.trim()) {
          showError(titleInput, 'Course title is required');
          isValid = false;
        } else if (titleInput.value.length < 5) {
          showError(titleInput, 'Course title must be at least 5 characters');
          isValid = false;
        } else if (titleInput.value.length > 100) {
          showError(titleInput, 'Course title must be less than 100 characters');
          isValid = false;
        } else {
          clearError(titleInput);
        }
        
        // Category validation
        if (!categoryInput.value.trim()) {
          showError(categoryInput, 'Category is required');
          isValid = false;
        } else {
          clearError(categoryInput);
        }
        
        // Price validation
        if (!priceInput.value.trim()) {
          showError(priceInput, 'Price is required');
          isValid = false;
        } else if (isNaN(priceInput.value) || Number(priceInput.value) < 0) {
          showError(priceInput, 'Price must be a positive number');
          isValid = false;
        } else if (Number(priceInput.value) > 9999.99) {
          showError(priceInput, 'Price cannot exceed $9,999.99');
          isValid = false;
        } else {
          clearError(priceInput);
        }
        
        // Language validation
        if (!languageSelect.value) {
          showError(languageSelect, 'Please select a language');
          isValid = false;
        } else {
          clearError(languageSelect);
        }
        
        // Thumbnail validation
        // Use a boolean variable that is set once based on the EJS template context
        const isEditMode = Boolean("<%= isEdit %>".trim() === "true");
        if (!isEditMode && !thumbnailInput.files[0]) {
          showError(thumbnailInput, 'Thumbnail image is required');
          isValid = false;
        } else if (thumbnailInput.files[0]) {
          const fileValidation = validateFile(thumbnailInput.files[0]);
          if (fileValidation !== true) {
            showError(thumbnailInput, fileValidation);
            isValid = false;
          } else {
            clearError(thumbnailInput);
          }
        } else {
          clearError(thumbnailInput);
        }
        
        // Description validation
        if (!descriptionInput.value.trim()) {
          showError(descriptionInput, 'Description is required');
          isValid = false;
        } else if (descriptionInput.value.length < 20) {
          showError(descriptionInput, 'Description must be at least 20 characters');
          isValid = false;
        } else if (descriptionInput.value.length > 1000) {
          showError(descriptionInput, 'Description must be less than 1000 characters');
          isValid = false;
        } else {
          clearError(descriptionInput);
        }
        
        if (!isValid) {
          // Scroll to the first error
          const firstError = document.querySelector('.error-message:not(.hidden)');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          return;
        }
        
        // Submit form via fetch
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        
        try {
          submitButton.disabled = true;
          submitButton.textContent = isEditMode ? 'Updating...' : 'Creating...';
          
          // Prepare FormData
          const formData = new FormData(form);
          
          // Determine URL and method
          const url = isEditMode 
            ? `/instructor/courses/<%= isEdit ? course._id : '' %>`
            : '/instructor/courses/new';
          
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Accept': 'application/json'
            },
            body: formData
          });
          
          const data = await response.json();
          
          if (data.success) {
            showSuccessMessage(data.message);
            
            // Redirect after a short delay
            setTimeout(() => {
              window.location.href = data.redirectUrl;
            }, 1000);
          } else {
            showErrorMessage(data.message || 'An error occurred');
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
          }
        } catch (error) {
          console.error('Error submitting form:', error);
          showErrorMessage('An error occurred while saving the course. Please try again.');
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      });
      
      // Helper function to show success message
      function showSuccessMessage(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'bg-green-800 border border-green-600 text-green-300 px-4 py-3 rounded mb-4';
        alertDiv.textContent = message;
        
        const container = document.querySelector('.container');
        const heading = container.querySelector('h1');
        heading.insertAdjacentElement('afterend', alertDiv);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
          alertDiv.style.transition = 'opacity 0.3s ease-out';
          alertDiv.style.opacity = '0';
          setTimeout(() => alertDiv.remove(), 300);
        }, 3000);
      }
      
      // Helper function to show error message
      function showErrorMessage(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'bg-red-800 border border-red-600 text-red-300 px-4 py-3 rounded mb-4';
        alertDiv.textContent = message;
        
        const container = document.querySelector('.container');
        const heading = container.querySelector('h1');
        heading.insertAdjacentElement('afterend', alertDiv);
        
        // Scroll to message
        alertDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      
      // Real-time validation on input
      titleInput.addEventListener('input', function() {
        if (this.value.trim() && this.value.length >= 5 && this.value.length <= 100) {
          clearError(this);
        }
      });
      
      categoryInput.addEventListener('input', function() {
        if (this.value.trim()) {
          clearError(this);
        }
      });
      
      priceInput.addEventListener('input', function() {
        if (this.value.trim() && !isNaN(this.value) && Number(this.value) >= 0 && Number(this.value) <= 9999.99) {
          clearError(this);
        }
      });
      
      languageSelect.addEventListener('change', function() {
        if (this.value) {
          clearError(this);
        }
      });
      
      thumbnailInput.addEventListener('change', function() {
        if (this.files[0]) {
          const fileValidation = validateFile(this.files[0]);
          if (fileValidation === true) {
            clearError(this);
          } else {
            showError(this, fileValidation);
          }
        }
      });
      
      descriptionInput.addEventListener('input', function() {
        if (this.value.trim() && this.value.length >= 20 && this.value.length <= 1000) {
          clearError(this);
        }
      });
    });
  </script>
</body>
</html>